{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  let index = 0;\n  var rList = [];\n  var wList = [];\n  var tList = [];\n  var asList = [];\n  var adList = [];\n  var timeList = [];\n  var dateList = [];\n  {\n    dataList.map((val, key) => {\n      if (val.ride_name) {\n        var minutes = new Date(val.ts).getMinutes();\n\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n\n        var time = new Date(val.ts).getHours() + \":\" + minutes;\n        var date = new Date(val.ts).toString().substring(0, 15);\n        index = index + 1;\n        console.log(\"Ride name = \", val.ride_name);\n        console.log(\"Time = \", time);\n        console.log(\"Date = \", date);\n        rList.push(val.ride_name);\n        timeList.push(time);\n        dateList.push(date);\n        console.log(\"Wait Time = \", val.WaitTime);\n        wList.push(val.WaitTime);\n        console.log(\"Throughput = \", val.Throughput);\n        tList.push(val.Throughput);\n        console.log(\"Available Seats = \", val.AvailableSeats);\n        asList.push(val.AvailableSeats);\n        console.log(\"Available Down = \", val.AvailableDown);\n        adList.push(val.AvailableDown);\n        console.log('');\n      }\n    });\n  }\n\n  const compareRide = () => {\n    for (var i = 0; i < index; i++) {\n      //check box list is compared with collected data\n      if (rideList.includes(rList[i])) {\n        console.log(\"Matched \", rList[i]); //each variable is compared with the selected stat\n\n        if (statList.includes(\"Wait Time\")) {\n          //locate variable\n          if (wList[i] != -1) {\n            console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n          }\n        }\n\n        if (statList.includes(\"Throughput\")) {\n          //locate variable\n          if (tList[i] != -1) {\n            console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n          }\n        }\n\n        if (statList.includes(\"Available Seats\")) {\n          //locate variable\n          if (asList[i] != -1) {\n            console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n          }\n        }\n\n        if (statList.includes(\"Available Down\")) {\n          //locate variable\n          if (adList[i] != -1) {\n            console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n          }\n        }\n\n        console.log('');\n      }\n    }\n  };\n\n  var data = [];\n\n  for (let i = 0; i < tList.length; i++) {\n    data.push({\n      x: timeList[i],\n      y: tList[i]\n    });\n  }\n\n  data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), console.log(\"Amount of rides \", index), console.log(\"Ride names = \", rList), console.log(\"TimeList = \", timeList), console.log(\"DateList = \", dateList), console.log(\"WaitList = \", wList), console.log(\"ThroughputList = \", tList), console.log(\"AvailableSeatList = \", asList), console.log(\"AvailableDownList = \", adList), compareRide(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n        height: 500,\n        width: 900,\n        xType: \"ordinal\",\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickTotal: 3,\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            return d;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: \"throughput\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n          data: data,\n          curve: 'curveMonotoneX',\n          color: \"#ADDDE1\",\n          markStyle: {\n            stroke: 'black'\n          },\n          style: {\n            strokeLinejoin: \"round\"\n          },\n          strokeStyle: \"solid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","index","rList","wList","tList","asList","adList","timeList","dateList","map","val","key","ride_name","minutes","Date","ts","getMinutes","time","getHours","date","toString","substring","push","WaitTime","Throughput","AvailableSeats","AvailableDown","compareRide","i","includes","length","x","y","sort","a","b","window","addEventListener","line","stroke","text","fill","fontWeight","d","strokeLinejoin"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Axios from 'axios';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    let index = 0;\n    var rList = [];\n    var wList = [];\n    var tList = [];\n    var asList = [];\n    var adList = [];\n    var timeList = [];\n    var dateList = [];\n\n\n    {dataList.map((val, key) => {\t\n        if (val.ride_name){\n            var minutes = new Date(val.ts).getMinutes();\n            if(minutes < 10){\n                minutes = \"0\" + minutes;\n            }\n            var time = new Date(val.ts).getHours() + \":\" + minutes;\n            var date = new Date(val.ts).toString().substring(0,15);\n            index = index + 1;\n            console.log(\"Ride name = \", val.ride_name);\n            console.log(\"Time = \", time);\n            console.log(\"Date = \", date);\n            rList.push(val.ride_name);\n            timeList.push(time);\n            dateList.push(date)\n            console.log(\"Wait Time = \", val.WaitTime);\n            wList.push(val.WaitTime);\n        \n            console.log(\"Throughput = \", val.Throughput)\n            tList.push(val.Throughput);\n\n\n            console.log(\"Available Seats = \", val.AvailableSeats)\n            asList.push(val.AvailableSeats);\n            console.log(\"Available Down = \", val.AvailableDown)\n            adList.push( val.AvailableDown);\n\n            console.log('');\n     }\n     })}\n\n     const compareRide = () => {\n        for(var i = 0; i < index; i++) {\n            //check box list is compared with collected data\n            if(rideList.includes(rList[i])) {\n                console.log(\"Matched \", rList[i]);\n                //each variable is compared with the selected stat\n                if(statList.includes(\"Wait Time\"))\n                {\n                    //locate variable\n                    if(wList[i] != -1) {\n                        console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n                     } \n                }\n                if(statList.includes(\"Throughput\"))\n                {\n                     //locate variable\n                    if(tList[i] != -1) {\n                        console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n                    }\n                }\n                if(statList.includes(\"Available Seats\"))\n                {\n                     //locate variable\n                    if(asList[i] != -1) {\n                        console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n                    }\n                }   \n                if(statList.includes(\"Available Down\"))\n                {\n                     //locate variable\n                    if(adList[i] != -1) {\n                        console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n                    }\n                }\n\n                \n                console.log('');\n            }\n        }\n    }\n     \n   var data = []\n\n   for (let i = 0; i < tList.length; i++) {\n       data.push({\n           x: timeList[i],\n           y: tList[i]\n       })\n   }\n   data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n    return (\n\n        <div>\n\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {console.log(\"Amount of rides \", index)}\n            {console.log(\"Ride names = \", rList)}\n            {console.log(\"TimeList = \", timeList)}\n            {console.log(\"DateList = \", dateList)}\n            {console.log(\"WaitList = \", wList)}\n            {console.log(\"ThroughputList = \", tList)}\n            {console.log(\"AvailableSeatList = \", asList)}\n            {console.log(\"AvailableDownList = \", adList)}\n\n\n            {compareRide()}\n            <div className=\"App\">\n             <FlexibleXYPlot height={500} width={900} xType=\"ordinal\">\n                <VerticalGridLines />\n                <HorizontalGridLines />\n\n                <XAxis title=\"Time of interval card\"\n                style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                    \n                  }}\n                tickTotal={3} \n                tickLabelAngle={-25} \n                tickFormat={d => {\n                 return d\n                }}\n                />\n                <YAxis title=\"throughput\"\n                 style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                  }}/>\n\n                 <LineMarkSeries data={data} curve={'curveMonotoneX'} color=\"#ADDDE1\"\n\n                       markStyle={{stroke: 'black'}}\n                       style={{ strokeLinejoin: \"round\"}}\n                       strokeStyle=\"solid\"/>\n            </FlexibleXYPlot>\n            </div>\t\t\t\t\n        </div>\n    );\n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
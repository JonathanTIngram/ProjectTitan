{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n  var intervalCard = [];\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  let index = 0;\n  {\n    dataList.map((val, key) => {\n      if (val.ride_name) {\n        var minutes = new Date(val.ts).getMinutes();\n\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n\n        var time = new Date(val.ts).getHours() + \":\" + minutes;\n        var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n        console.log(\"Ride name = \", val.ride_name);\n        intervalCard.push({\n          rideName: val.ride_name,\n          WaitTime: val.WaitTime,\n          Throughput: val.Throughput,\n          AvailableSeats: val.AvailableSeats,\n          AvailableDown: val.AvailableDown,\n          Time: time,\n          Date: date\n        });\n      }\n    });\n  }\n\n  const eachStat = list => {\n    var data = [];\n\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] != -1) {\n        if (rideList.includes(rList[i])) {\n          data.push({\n            x: timeList[i],\n            y: list[i]\n          });\n        } else {\n          console.log(\"Ride dne\");\n        }\n      }\n\n      data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n    }\n\n    return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n      data: data,\n      curve: 'curveMonotoneX',\n      color: \"#ADDDE1\",\n      markStyle: {\n        stroke: 'black'\n      },\n      style: {\n        strokeLinejoin: \"round\"\n      },\n      strokeStyle: \"solid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  };\n\n  const selectedStat = list => {\n    if (list == \"Throughput\") {\n      eachStat(tList);\n    }\n\n    if (list == \"Wait Time\") {\n      eachStat(wList);\n    }\n\n    if (list == \"Available Seats\") {\n      eachStat(asList);\n    }\n\n    if (list == \"Available Down\") {\n      eachStat(adList);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), selectedStat(statList), compareRide(), console.log(intervalCard), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n        height: 500,\n        width: 900,\n        xType: \"ordinal\",\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          } // tickTotal={data.length} \n          ,\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            return d;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: statList,\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","intervalCard","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","index","map","val","key","ride_name","minutes","Date","ts","getMinutes","time","getHours","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","eachStat","list","i","length","includes","rList","x","timeList","y","sort","a","b","stroke","strokeLinejoin","selectedStat","tList","wList","asList","adList","window","addEventListener","compareRide","line","text","fill","fontWeight","d"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { Component, useState, useEffect} from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\r\nimport {\r\n  FlexibleXYPlot,\r\n  FlexibleWidthXYPlot,\r\n  FlexibleHeightXYPlot\r\n} from 'react-vis';\r\nimport Axios from 'axios';\r\n\r\nfunction ChartLine() {\r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n    var intervalCard = [];\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    let index = 0;\r\n\r\n\r\n\r\n    {dataList.map((val, key) => {\r\n        if (val.ride_name){\r\n            var minutes = new Date(val.ts).getMinutes();\r\n            if(minutes < 10){\r\n                minutes = \"0\" + minutes;\r\n            }\r\n            var time = new Date(val.ts).getHours() + \":\" + minutes;\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            console.log(\"Ride name = \", val.ride_name);\r\n\r\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n     }\r\n     })}\r\n\r\n\r\n    const eachStat = (list) => {\r\n        var data = []\r\n        for (let i = 0; i < list.length; i++) {\r\n            if(list[i] != -1){\r\n                if(rideList.includes(rList[i])) \r\n                    {\r\n                        data.push({\r\n                            x: timeList[i],\r\n                            y: list[i]\r\n                        })\r\n                    }\r\n                else{\r\n                    console.log(\"Ride dne\")\r\n                }\r\n            }\r\n            data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\r\n\r\n        }\r\n        return (\r\n            <LineMarkSeries data={data} curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n\r\n            markStyle={{stroke: 'black'}}\r\n            style={{ strokeLinejoin: \"round\"}}\r\n            strokeStyle=\"solid\"/>\r\n           ) \r\n    }\r\n\r\n    const selectedStat = (list) => {\r\n        if(list == \"Throughput\") {\r\n            eachStat(tList)\r\n        }\r\n        if(list == \"Wait Time\") {\r\n            eachStat(wList)\r\n        }\r\n        if(list == \"Available Seats\") {\r\n            eachStat(asList)\r\n        }\r\n        if(list == \"Available Down\") {\r\n            eachStat(adList)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n        }, [])}\r\n\r\n            {selectedStat(statList)}\r\n            {compareRide()}\r\n            {console.log(intervalCard)}\r\n\r\n            <div className=\"App\">\r\n             <FlexibleXYPlot height={500} width={900} xType=\"ordinal\">\r\n                <VerticalGridLines />\r\n                <HorizontalGridLines />\r\n\r\n                <XAxis title=\"Time of interval card\"\r\n                style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                  }}\r\n                // tickTotal={data.length} \r\n                tickLabelAngle={-25} \r\n                tickFormat={d => {\r\n                 return d\r\n                }}\r\n                />\r\n                <YAxis title={statList}\r\n                 style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                  }}/>\r\n\r\n                 {/* {eachStat()} */}\r\n            </FlexibleXYPlot>\r\n            </div>\t\t\t\t\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
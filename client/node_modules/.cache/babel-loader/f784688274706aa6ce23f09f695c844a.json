{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Plot from 'react-plotly.js';\nimport Plotly from 'plotly.js';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      for (let i = 0; i < rideList.length; i++) {\n        const element = rideList[i];\n\n        if (val.ride_name == element) {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        }\n      }\n    });\n  }\n  var data = [];\n  var selected = '';\n  var result = [];\n  var result2 = [];\n\n  const test = () => {\n    for (var i = 0; i < intervalCard.length; i++) {\n      if (intervalCard[i].Throughput != -1) {\n        var x = intervalCard[i].Time;\n        var y = intervalCard[i].Throughput;\n        result = {\n          x: x,\n          y: y\n        };\n      }\n\n      data.push(result);\n      data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n    }\n\n    console.log(data, 'data', result, 'result');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), test(), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDiv\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: data,\n        layout: {\n          xaxis: {\n            type: 'time'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Plot","Plotly","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","map","val","key","i","length","element","ride_name","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","selected","result","result2","test","x","y","sort","a","b","window","addEventListener","xaxis","type"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Plot from 'react-plotly.js';\nimport Plotly from 'plotly.js';\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n\n    var intervalCard = [];\n    {dataList.map((val, key) => {\t\n        for (let i = 0; i < rideList.length; i++) {\n            const element = rideList[i];\n        if (val.ride_name == element){\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n        }\n        }\n     })}\n  \n    var data = []\n    var selected = '';\n    var result = []\n    var result2 = []\n    const test = () => {\n        for ( var i = 0 ; i < intervalCard.length ; i++ ) {\n            if(intervalCard[i].Throughput != -1){\n                var x = intervalCard[i].Time\n                var y = intervalCard[i].Throughput\n                result = {\n                    x: x,\n                    y: y\n                };\n            }\n                data.push(result);\n                data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n        }\n            console.log(data, 'data', result, 'result')\n    }\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n        {test()}\n            <div id='myDiv'>\n            <Plot \n            data={data}\n            layout={{\n                xaxis: {\n                type: 'time'\n                }, \n            }}\n            >\n\n\n\n\n            </Plot>\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
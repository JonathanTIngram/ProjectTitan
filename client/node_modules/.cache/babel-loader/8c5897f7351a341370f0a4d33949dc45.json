{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport { timeFormatDefaultLocale } from 'd3-time-format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst locale = timeFormatDefaultLocale({\n  dateTime: '%a %b %e %X %Y',\n  date: '%d/%m/%Y',\n  time: '%H : %M : %S',\n  periods: ['AM', 'PM'],\n  days: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],\n  shortDays: ['Di', 'Lu', 'Ma', 'Me', 'Je', 'Ve', 'Sa'],\n  months: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Decembre'],\n  shortMonths: ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Juil', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec']\n});\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  let index = 0;\n  var rList = [];\n  var wList = [];\n  var tList = [];\n  var asList = [];\n  var adList = [];\n  var timeList = [];\n  var dateList = [];\n  {\n    dataList.map((val, key) => {\n      if (val.ride_name) {\n        var minutes = new Date(val.ts).getMinutes();\n\n        if (minutes < 10) {} else {\n          minutes = minutes;\n        }\n\n        var time = new Date(val.ts).getHours() + \":\" + 0 + new Date(val.ts).getMinutes();\n        var date = new Date(val.ts).toString().substring(0, 15);\n        index = index + 1;\n        console.log(\"Ride name = \", val.ride_name);\n        console.log(\"Time = \", time);\n        console.log(\"Date = \", date);\n        rList.push(val.ride_name);\n        timeList.push(time);\n        dateList.push(date);\n        console.log(\"Wait Time = \", val.WaitTime);\n        wList.push(val.WaitTime);\n        console.log(\"Throughput = \", val.Throughput);\n        tList.push(val.Throughput);\n        console.log(\"Available Seats = \", val.AvailableSeats);\n        asList.push(val.AvailableSeats);\n        console.log(\"Available Down = \", val.AvailableDown);\n        adList.push(val.AvailableDown);\n        console.log('');\n      }\n    });\n  }\n\n  const compareRide = () => {\n    for (var i = 0; i < index; i++) {\n      //check box list is compared with collected data\n      if (rideList.includes(rList[i])) {\n        console.log(\"Matched \", rList[i]); //each variable is compared with the selected stat\n\n        if (statList.includes(\"Wait Time\")) {\n          //locate variable\n          if (wList[i] != -1) {\n            console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n          }\n        }\n\n        if (statList.includes(\"Throughput\")) {\n          //locate variable\n          if (tList[i] != -1) {\n            console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n          }\n        }\n\n        if (statList.includes(\"Available Seats\")) {\n          //locate variable\n          if (asList[i] != -1) {\n            console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n          }\n        }\n\n        if (statList.includes(\"Available Down\")) {\n          //locate variable\n          if (adList[i] != -1) {\n            console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n          }\n        }\n\n        console.log('');\n      }\n    }\n  };\n\n  var data = [];\n\n  for (let i = 0; i < tList.length; i++) {\n    data.push({\n      x: timeList[i],\n      y: tList[i]\n    });\n  }\n\n  function msToTime(duration) {\n    var milliseconds = Math.floor(duration % 1000 / 100),\n        seconds = Math.floor(duration / 1000 % 60),\n        minutes = Math.floor(duration / (1000 * 60) % 60),\n        hours = Math.floor(duration / (1000 * 60 * 60) % 24);\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return hours + \":\" + minutes;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), console.log(\"Amount of rides \", index), console.log(\"Ride names = \", rList), console.log(\"TimeList = \", timeList), console.log(\"DateList = \", dateList), console.log(\"WaitList = \", wList), console.log(\"ThroughputList = \", tList), console.log(\"AvailableSeatList = \", asList), console.log(\"AvailableDownList = \", adList), compareRide(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n        height: 500,\n        width: 900,\n        xType: \"ordinal\",\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickTotal: data.length,\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            return d;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: \"throughput\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n          data: data,\n          curve: 'curveMonotoneX',\n          color: \"#ADDDE1\",\n          markStyle: {\n            stroke: 'black'\n          },\n          style: {\n            strokeLinejoin: \"round\"\n          },\n          strokeStyle: \"solid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","timeFormatDefaultLocale","locale","dateTime","date","time","periods","days","shortDays","months","shortMonths","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","index","rList","wList","tList","asList","adList","timeList","dateList","map","val","key","ride_name","minutes","Date","ts","getMinutes","getHours","toString","substring","push","WaitTime","Throughput","AvailableSeats","AvailableDown","compareRide","i","includes","length","x","y","msToTime","duration","milliseconds","Math","floor","seconds","hours","window","addEventListener","line","stroke","text","fill","fontWeight","d","strokeLinejoin"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Axios from 'axios';\nimport {timeFormatDefaultLocale} from 'd3-time-format';\nconst locale = timeFormatDefaultLocale({\n    dateTime    : '%a %b %e %X %Y',\n    date        : '%d/%m/%Y',\n    time        : '%H : %M : %S',\n    periods     : ['AM', 'PM'],\n    days        : ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],\n    shortDays   : ['Di', 'Lu', 'Ma', 'Me', 'Je', 'Ve', 'Sa'],\n    months      : ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Decembre'],\n    shortMonths : ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Juil', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec']\n});\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    let index = 0;\n    var rList = [];\n    var wList = [];\n    var tList = [];\n    var asList = [];\n    var adList = [];\n    var timeList = [];\n    var dateList = [];\n\n\n    {dataList.map((val, key) => {\t\n        if (val.ride_name){\n            var minutes = new Date(val.ts).getMinutes();\n            if(minutes < 10){\n\n            }\n            else{\n                minutes = minutes;\n            }\n            var time = new Date(val.ts).getHours() + \":\" + 0 + new Date(val.ts).getMinutes();\n            var date = new Date(val.ts).toString().substring(0,15);\n            index = index + 1;\n            console.log(\"Ride name = \", val.ride_name);\n            console.log(\"Time = \", time);\n            console.log(\"Date = \", date);\n            rList.push(val.ride_name);\n            timeList.push(time);\n            dateList.push(date)\n            console.log(\"Wait Time = \", val.WaitTime);\n            wList.push(val.WaitTime);\n        \n            console.log(\"Throughput = \", val.Throughput)\n            tList.push(val.Throughput);\n\n\n            console.log(\"Available Seats = \", val.AvailableSeats)\n            asList.push(val.AvailableSeats);\n            console.log(\"Available Down = \", val.AvailableDown)\n            adList.push( val.AvailableDown);\n\n            console.log('');\n     }\n     })}\n\n     const compareRide = () => {\n        for(var i = 0; i < index; i++) {\n            //check box list is compared with collected data\n            if(rideList.includes(rList[i])) {\n                console.log(\"Matched \", rList[i]);\n                //each variable is compared with the selected stat\n                if(statList.includes(\"Wait Time\"))\n                {\n                    //locate variable\n                    if(wList[i] != -1) {\n                        console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n                     } \n                }\n                if(statList.includes(\"Throughput\"))\n                {\n                     //locate variable\n                    if(tList[i] != -1) {\n                        console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n                    }\n                }\n                if(statList.includes(\"Available Seats\"))\n                {\n                     //locate variable\n                    if(asList[i] != -1) {\n                        console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n                    }\n                }   \n                if(statList.includes(\"Available Down\"))\n                {\n                     //locate variable\n                    if(adList[i] != -1) {\n                        console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n                    }\n                }\n\n                \n                console.log('');\n            }\n        }\n    }\n     \n   var data = []\n\n   for (let i = 0; i < tList.length; i++) {\n       data.push({\n           x: timeList[i],\n           y: tList[i]\n       })\n   }\n\n   function msToTime(duration) {\n    var milliseconds = Math.floor((duration % 1000) / 100),\n      seconds = Math.floor((duration / 1000) % 60),\n      minutes = Math.floor((duration / (1000 * 60)) % 60),\n      hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  \n    hours = (hours < 10) ? \"0\" + hours : hours;\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n  \n    return hours + \":\" + minutes\n  }\n\n    return (\n\n        <div>\n\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {console.log(\"Amount of rides \", index)}\n            {console.log(\"Ride names = \", rList)}\n            {console.log(\"TimeList = \", timeList)}\n            {console.log(\"DateList = \", dateList)}\n            {console.log(\"WaitList = \", wList)}\n            {console.log(\"ThroughputList = \", tList)}\n            {console.log(\"AvailableSeatList = \", asList)}\n            {console.log(\"AvailableDownList = \", adList)}\n\n\n            {compareRide()}\n            <div className=\"App\">\n             <FlexibleXYPlot height={500} width={900} xType=\"ordinal\">\n                <VerticalGridLines />\n                <HorizontalGridLines />\n\n                <XAxis title=\"Time of interval card\"\n                style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                  }}\n                tickTotal={data.length} \n                tickLabelAngle={-25} \n                tickFormat={d => {\n                 return d\n                }}\n                />\n                <YAxis title=\"throughput\"\n                 style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                  }}/>\n\n                 <LineMarkSeries data={data} curve={'curveMonotoneX'} color=\"#ADDDE1\"\n\n                       markStyle={{stroke: 'black'}}\n                       style={{ strokeLinejoin: \"round\"}}\n                       strokeStyle=\"solid\"/>\n            </FlexibleXYPlot>\n            </div>\t\t\t\t\n        </div>\n    );\n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
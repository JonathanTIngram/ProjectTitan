{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n  var throughputTime = [];\n  var waitTimeTime = [];\n  var availableSeatsTime = [];\n  var availableDownTime = [];\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  var throughput;\n  {\n    dataList.map((val, key) => {\n      var time = new Date(val.ts);\n      var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n      intervalCard.push({\n        rideName: val.ride_name,\n        WaitTime: val.WaitTime,\n        Throughput: val.Throughput,\n        AvailableSeats: val.AvailableSeats,\n        AvailableDown: val.AvailableDown,\n        Time: time,\n        Date: date\n      });\n    });\n  }\n  var data = [];\n  var selected = '';\n  var organized = []; //prints intervalCard in order\n\n  const printOrdered = () => {\n    var temp = [];\n    var name = '';\n    intervalCard.forEach(i => {\n      name = i.rideName;\n\n      if (!temp.includes(name)) {\n        temp.push(name);\n      }\n    });\n    {\n      intervalCard.map((val, key) => {\n        var j = 0;\n\n        if (temp[j] == val.rideName) {\n          j++;\n          organized.push(val);\n        } else {\n          organized.unshift(val);\n        }\n      });\n    } //console.log(organized)\n    //console.log(temp)\n  };\n\n  var time = [];\n  var select = [];\n  var throughputData = [];\n  var waitTimeData = [];\n  var availableSeatsData = [];\n  var availableDownData = [];\n  var name = [];\n  var graphData = [];\n\n  const graphStat = ride => {\n    console.log(organized);\n\n    for (let i = 0; i < ride.length; i++) {\n      var foundData = false;\n      var temp = ride[i];\n      var TEMPthroughputData = [];\n      var TEMPwaitTimeData = [];\n      var TEMPavailableSeatsData = [];\n      var TEMPavailableDownData = [];\n      var TEMPthroughputTime = [];\n      var TEMPwaitTimeTime = [];\n      var TEMPavailableSeatsTime = [];\n      var TEMPavailableDownTime = [];\n\n      for (let i = 0; i < organized.length; i++) {\n        if (organized[i].rideName == temp) {\n          if (statList.includes(\"Throughput\") && organized[i].Throughput >= 0) {\n            TEMPthroughputTime.push(organized[i].Time);\n            TEMPthroughputData.push(organized[i].Throughput);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Wait Time\") && organized[i].WaitTime >= 0) {\n            TEMPwaitTimeData.push(organized[i].WaitTime);\n            TEMPwaitTimeTime.push(organized[i].Time);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Available Seats\") && organized[i].AvailableSeats >= 0) {\n            TEMPavailableSeatsData.push(organized[i].AvailableSeats);\n            TEMPavailableSeatsTime.push(organized[i].Time);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Available Down\") && organized[i].AvailableDown >= 0) {\n            TEMPavailableDownData.push(organized[i].AvailableDown);\n            TEMPavailableDownTime.push(organized[i].Time);\n            foundData = true;\n          }\n\n          if (organized[i].rideName != temp) {\n            break;\n          }\n        }\n      }\n\n      if (foundData) {\n        graphData.push({\n          temp,\n          TEMPthroughputTime,\n          TEMPthroughputData,\n          TEMPwaitTimeTime,\n          TEMPwaitTimeData,\n          TEMPavailableSeatsTime,\n          TEMPavailableSeatsData,\n          TEMPavailableDownTime,\n          TEMPavailableDownData\n        });\n      }\n    }\n\n    console.log(graphData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), printOrdered(), graphStat(rideList), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDiv\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: throughputTime,\n          y: throughputData,\n          name: \"Throughput\"\n        }, {\n          x: waitTimeTime,\n          y: waitTimeData,\n          name: \"Wait Time\"\n        }, {\n          x: availableDownTime,\n          y: availableSeatsData,\n          name: \"Available Seats\"\n        }, {\n          x: availableDownTime,\n          y: availableDownData,\n          name: \"Available Down\"\n        }],\n        layout: {\n          width: 750,\n          height: 520,\n          xaxis: {\n            type: 'time'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c2 = ChartLine;\nexport default ChartLine;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","useState","useEffect","Plotly","createPlotlyComponent","Axios","styled","Plot","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","throughputTime","waitTimeTime","availableSeatsTime","availableDownTime","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","throughput","map","val","key","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","ride_name","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","selected","organized","printOrdered","temp","name","forEach","i","includes","j","unshift","select","throughputData","waitTimeData","availableSeatsData","availableDownData","graphData","graphStat","ride","length","foundData","TEMPthroughputData","TEMPwaitTimeData","TEMPavailableSeatsData","TEMPavailableDownData","TEMPthroughputTime","TEMPwaitTimeTime","TEMPavailableSeatsTime","TEMPavailableDownTime","window","addEventListener","x","y","width","height","xaxis","type"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { useState, useEffect} from 'react';\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport Axios from 'axios';\r\nimport styled from 'styled-components';\r\nvar Plot = createPlotlyComponent(Plotly);\r\n\r\nfunction ChartLine() {\r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n\r\n    var throughputTime = [];\r\n    var waitTimeTime = [];\r\n    var availableSeatsTime = [];\r\n    var availableDownTime = [];\r\n\r\n\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n\r\n    var intervalCard = [];\r\n    var throughput;\r\n\r\n    {dataList.map((val, key) => {\t\r\n            var time = new Date(val.ts)\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n        \r\n     })}\r\n  \r\n    var data = []\r\n    var selected = '';\r\n    var organized = []\r\n    //prints intervalCard in order\r\n    const printOrdered = () => {\r\n        var temp = [];\r\n        var name = ''\r\n        intervalCard.forEach(i => {\r\n            name = i.rideName;\r\n            if(!temp.includes(name)){\r\n                temp.push(name)\r\n            }\r\n        });\r\n            {intervalCard.map((val, key) => {\t\r\n            var j = 0\r\n            if(temp[j] == val.rideName){\r\n                j++;\r\n                organized.push(val)\r\n            }\r\n            else{\r\n                organized.unshift(val)\r\n            }\r\n        })}\r\n        //console.log(organized)\r\n        //console.log(temp)\r\n    }\r\n\r\n    var time = [];\r\n    var select = [];\r\n    var throughputData = [];\r\n    var waitTimeData = [];\r\n    var availableSeatsData = [];\r\n    var availableDownData = [];\r\n    var name = []\r\n\r\n    var graphData = [];\r\n\r\n    const graphStat = (ride) => \r\n    {\r\n        console.log(organized)\r\n        for(let i = 0; i < ride.length; i++)\r\n        {\r\n            var foundData = false;\r\n            var temp = ride[i];\r\n            var TEMPthroughputData = [];\r\n            var TEMPwaitTimeData = [];\r\n            var TEMPavailableSeatsData = [];\r\n            var TEMPavailableDownData = [];\r\n            var TEMPthroughputTime = [];\r\n            var TEMPwaitTimeTime = [];\r\n            var TEMPavailableSeatsTime = [];\r\n            var TEMPavailableDownTime = [];\r\n\r\n                for(let i = 0; i < organized.length; i++) \r\n                {   \r\n                    if(organized[i].rideName == temp)\r\n                    {\r\n\r\n                        if(statList.includes(\"Throughput\") && organized[i].Throughput >= 0){\r\n                            TEMPthroughputTime.push(organized[i].Time)\r\n                            TEMPthroughputData.push(organized[i].Throughput);\r\n                            foundData = true;\r\n                        }\r\n\r\n                        if(statList.includes(\"Wait Time\") && organized[i].WaitTime >= 0){\r\n                            TEMPwaitTimeData.push(organized[i].WaitTime);\r\n                            TEMPwaitTimeTime.push(organized[i].Time)\r\n                            foundData = true;\r\n                        }\r\n\r\n                        if(statList.includes(\"Available Seats\") && organized[i].AvailableSeats >= 0){\r\n                            TEMPavailableSeatsData.push(organized[i].AvailableSeats);\r\n                            TEMPavailableSeatsTime.push(organized[i].Time)\r\n                            foundData = true;\r\n                        }\r\n\r\n                        if(statList.includes(\"Available Down\") && organized[i].AvailableDown >= 0){\r\n                            TEMPavailableDownData.push(organized[i].AvailableDown);\r\n                            TEMPavailableDownTime.push(organized[i].Time)\r\n                            foundData = true;\r\n                        }\r\n                        \r\n                        if(organized[i].rideName != temp)\r\n                        {\r\n                            break;\r\n                        }\r\n                    }  \r\n                }\r\n                if(foundData)\r\n                {\r\n                    graphData.push({temp ,TEMPthroughputTime, TEMPthroughputData, TEMPwaitTimeTime, TEMPwaitTimeData, TEMPavailableSeatsTime, TEMPavailableSeatsData, TEMPavailableDownTime, TEMPavailableDownData})\r\n                }\r\n        }\r\n         console.log(graphData)\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n        }, [])}\r\n            {printOrdered()}\r\n            {graphStat(rideList)}\r\n            <div id='myDiv'>\r\n            <Plot \r\n            data={[\r\n                {\r\n                    x: throughputTime,\r\n                    y: throughputData,\r\n                    name: \"Throughput\"\r\n                },\r\n                {\r\n                    x: waitTimeTime,\r\n                    y: waitTimeData,\r\n                    name: \"Wait Time\"\r\n                },\r\n                {\r\n                    x: availableDownTime,\r\n                    y: availableSeatsData,\r\n                    name: \"Available Seats\"\r\n                },\r\n                {\r\n                    x: availableDownTime,\r\n                    y: availableDownData,\r\n                    name: \"Available Down\"\r\n                }\r\n            ]}\r\n            layout={{\r\n                width: 750, height: 520,\r\n                xaxis: {\r\n                type: 'time'\r\n                }, \r\n            }}\r\n            />\r\n            </div>\t\t\t\t\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
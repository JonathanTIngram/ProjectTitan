{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { sendGraphData } from './FavoriteBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Plot = createPlotlyComponent(Plotly);\n_c = Plot;\nvar rideListSend;\nvar statListSend;\nvar recData = JSON.parse(localStorage.getItem('data') || '[]');\n;\nexport function saveLists() {\n  return {\n    rideList: rideListSend,\n    statList: statListSend\n  };\n}\nexport function ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const setFavGraph = () => {\n    // localStorage.clear()\n    var rideString = recData[0].rides;\n    var favRides = rideString.split(',');\n    setRideList(favRides);\n    var statString = recData[0].stats;\n    var favStats = statString.split(',');\n    setStatList(favStats);\n  };\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n\n      if (recData.length > 0) {\n        setFavGraph();\n      }\n\n      rideListSend = res.data;\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n\n      if (recData.length > 0) {\n        setFavGraph();\n      }\n\n      statListSend = res.data;\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      var time = new Date(val.ts);\n      var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n      intervalCard.push({\n        rideName: val.ride_name,\n        WaitTime: val.WaitTime,\n        Throughput: val.Throughput,\n        AvailableSeats: val.AvailableSeats,\n        AvailableDown: val.AvailableDown,\n        Time: time,\n        Date: date\n      });\n    });\n  }\n  var graphData = [];\n\n  const graphStat = ride => {\n    for (let i = 0; i < ride.length; i++) {\n      var foundData = false;\n      var temp = ride[i];\n      var TEMPthroughputData = [];\n      var TEMPwaitTimeData = [];\n      var TEMPavailableSeatsData = [];\n      var TEMPavailableDownData = [];\n      var TEMPthroughputTime = [];\n      var TEMPwaitTimeTime = [];\n      var TEMPavailableSeatsTime = [];\n      var TEMPavailableDownTime = [];\n\n      for (let i = 0; i < intervalCard.length; i++) {\n        if (intervalCard[i].rideName == temp) {\n          if (statList.includes(\"Throughput\") && intervalCard[i].Throughput >= 0) {\n            TEMPthroughputTime.push(intervalCard[i].Time);\n            TEMPthroughputData.push(intervalCard[i].Throughput);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Wait Time\") && intervalCard[i].WaitTime >= 0) {\n            TEMPwaitTimeData.push(intervalCard[i].WaitTime);\n            TEMPwaitTimeTime.push(intervalCard[i].Time);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Available Seats\") && intervalCard[i].AvailableSeats >= 0) {\n            TEMPavailableSeatsData.push(intervalCard[i].AvailableSeats);\n            TEMPavailableSeatsTime.push(intervalCard[i].Time);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Available Down\") && intervalCard[i].AvailableDown >= 0) {\n            TEMPavailableDownData.push(intervalCard[i].AvailableDown);\n            TEMPavailableDownTime.push(intervalCard[i].Time);\n            foundData = true;\n          }\n\n          if (intervalCard[i].rideName != temp) {\n            break;\n          }\n        }\n      }\n\n      if (foundData) {\n        graphData.push({\n          temp,\n          TEMPthroughputTime,\n          TEMPthroughputData,\n          TEMPwaitTimeTime,\n          TEMPwaitTimeData,\n          TEMPavailableSeatsTime,\n          TEMPavailableSeatsData,\n          TEMPavailableDownTime,\n          TEMPavailableDownData\n        });\n      }\n\n      getGraphData();\n    }\n  };\n\n  var rideTraceArray = [];\n  var tempRide = '';\n\n  const getGraphData = () => {\n    //console.log(graphData)\n    for (let i = 0; i < graphData.length; i++) {\n      if (statList.includes(\"Throughput\")) {\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPthroughputTime,\n          y: graphData[i].TEMPthroughputData,\n          name: graphData[i].temp + \" Throughput\"\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n\n      if (statList.includes(\"Wait Time\")) {\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPwaitTimeTime,\n          y: graphData[i].TEMPwaitTimeData,\n          name: graphData[i].temp + \" Wait Time\"\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n\n      if (statList.includes(\"Available Seats\")) {\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPavailableSeatsTime,\n          y: graphData[i].TEMPavailableSeatsData,\n          name: graphData[i].temp + \" Available Seats\"\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n\n      if (statList.includes(\"Available Down\")) {\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPavailableDownTime,\n          y: graphData[i].TEMPavailableDownData,\n          name: graphData[i].temp + \" Available Down\"\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n    }\n\n    const unique = [...new Map(rideTraceArray.map(o => [o.name, o])).values()];\n    rideTraceArray = unique;\n  };\n\n  var title = '';\n\n  for (let i = 0; i < rideList.length; i++) {\n    if (rideList.length == 1) {\n      if (rideList.length == 1) {\n        title = rideList[0] + ' ' + title + '(' + statList + ')';\n\n        if (statList == '') {\n          title = rideList[0];\n        }\n      }\n    } else if (rideList.length == 2) {\n      title = rideList[0] + ' and ' + rideList[1];\n    } else if (rideList.length > 2) {\n      var tmp = [...new Set(rideList)];\n      var last = tmp.pop();\n      var result = tmp.join(', ') + ' and ' + last;\n      title = result;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), console.log('recData'), console.log(recData), graphStat(rideList), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDiv\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: rideTraceArray,\n        layout: {\n          width: 950,\n          height: 570,\n          xaxis: {\n            title: 'Time',\n            type: 'time'\n          },\n          yaxis: {\n            title: 'Amount'\n          },\n          title: title\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c2 = ChartLine;\nexport default ChartLine;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","useState","useEffect","Plotly","createPlotlyComponent","Axios","styled","sendGraphData","Plot","rideListSend","statListSend","recData","JSON","parse","localStorage","getItem","saveLists","rideList","statList","ChartLine","setRideList","setStatList","dataList","setDataList","setFavGraph","rideString","rides","favRides","split","statString","stats","favStats","CheckedRideName","get","then","res","data","length","catch","err","console","log","CheckedStat","CheckedData","intervalCard","map","val","key","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","ride_name","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","graphData","graphStat","ride","i","foundData","temp","TEMPthroughputData","TEMPwaitTimeData","TEMPavailableSeatsData","TEMPavailableDownData","TEMPthroughputTime","TEMPwaitTimeTime","TEMPavailableSeatsTime","TEMPavailableDownTime","includes","getGraphData","rideTraceArray","tempRide","window","x","y","name","unique","Map","o","values","title","tmp","Set","last","pop","result","join","addEventListener","width","height","xaxis","type","yaxis"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { useState, useEffect} from 'react';\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport Axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport { sendGraphData } from './FavoriteBar';\r\nvar Plot = createPlotlyComponent(Plotly);\r\nvar rideListSend;\r\nvar statListSend;\r\nvar recData = JSON.parse(localStorage.getItem('data') || '[]');;\r\n\r\nexport function saveLists()\r\n    {\r\n        return {\r\n        rideList: rideListSend,\r\n        statList: statListSend\r\n        }\r\n    }\r\n\r\nexport function ChartLine() {\r\n\r\n   \r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n\r\n    const setFavGraph = () => {\r\n        // localStorage.clear()\r\n        var rideString = recData[0].rides\r\n        var favRides = rideString.split(',')\r\n        setRideList(favRides)\r\n\r\n        var statString = recData[0].stats\r\n        var favStats = statString.split(',')\r\n        setStatList(favStats)\r\n\r\n        \r\n    }\r\n\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n                if(recData.length > 0)\r\n                {\r\n                    setFavGraph();\r\n                }\r\n                rideListSend = res.data;\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n            if(recData.length > 0)\r\n            {\r\n                setFavGraph();\r\n            }\r\n            statListSend = res.data;\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n\r\n    var intervalCard = [];\r\n\r\n    {dataList.map((val, key) => {\t\r\n            var time = new Date(val.ts)\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n        \r\n     })}\r\n  \r\n\r\n    var graphData = [];\r\n\r\n    const graphStat = (ride) => \r\n    {\r\n        for(let i = 0; i < ride.length; i++)\r\n        {\r\n            var foundData = false;\r\n            var temp = ride[i];\r\n            var TEMPthroughputData = [];\r\n            var TEMPwaitTimeData = [];\r\n            var TEMPavailableSeatsData = [];\r\n            var TEMPavailableDownData = [];\r\n            var TEMPthroughputTime = [];\r\n            var TEMPwaitTimeTime = [];\r\n            var TEMPavailableSeatsTime = [];\r\n            var TEMPavailableDownTime = [];\r\n\r\n                for(let i = 0; i < intervalCard.length; i++) \r\n                {   \r\n                    if(intervalCard[i].rideName == temp)\r\n                    {\r\n\r\n                        if(statList.includes(\"Throughput\") && intervalCard[i].Throughput >= 0){\r\n                            TEMPthroughputTime.push(intervalCard[i].Time)\r\n                            TEMPthroughputData.push(intervalCard[i].Throughput);\r\n                            foundData = true;\r\n                        }\r\n\r\n                        if(statList.includes(\"Wait Time\") && intervalCard[i].WaitTime >= 0){\r\n                            TEMPwaitTimeData.push(intervalCard[i].WaitTime);\r\n                            TEMPwaitTimeTime.push(intervalCard[i].Time)\r\n                            foundData = true;\r\n                        }\r\n\r\n                        if(statList.includes(\"Available Seats\") && intervalCard[i].AvailableSeats >= 0){\r\n                            TEMPavailableSeatsData.push(intervalCard[i].AvailableSeats);\r\n                            TEMPavailableSeatsTime.push(intervalCard[i].Time)\r\n                            foundData = true;\r\n                        }\r\n\r\n                        if(statList.includes(\"Available Down\") && intervalCard[i].AvailableDown >= 0){\r\n                            TEMPavailableDownData.push(intervalCard[i].AvailableDown);\r\n                            TEMPavailableDownTime.push(intervalCard[i].Time)\r\n                            foundData = true;\r\n                        }\r\n                        \r\n                        if(intervalCard[i].rideName != temp)\r\n                        {\r\n                            break;\r\n                        }\r\n                    }  \r\n                }\r\n                if(foundData)\r\n                {\r\n                    graphData.push({temp ,TEMPthroughputTime, TEMPthroughputData, TEMPwaitTimeTime, TEMPwaitTimeData, TEMPavailableSeatsTime, TEMPavailableSeatsData, TEMPavailableDownTime, TEMPavailableDownData})\r\n                }\r\n              getGraphData();  \r\n        }\r\n    }\r\n    var rideTraceArray = [];\r\n    var tempRide = '';\r\n    \r\n\r\n    const getGraphData = () => {\r\n        //console.log(graphData)\r\n        for(let i = 0; i < graphData.length; i++)\r\n        {   \r\n            if(statList.includes(\"Throughput\"))\r\n            {\r\n                tempRide = graphData[i].temp;\r\n                tempRide = `${tempRide}Trace`;\r\n                window[tempRide] = {\r\n                    x: graphData[i].TEMPthroughputTime,\r\n                    y: graphData[i].TEMPthroughputData,\r\n                    name: graphData[i].temp + \" Throughput\"\r\n                };\r\n                rideTraceArray.push(window[tempRide])\r\n            }\r\n            if(statList.includes(\"Wait Time\"))\r\n            {\r\n                tempRide = graphData[i].temp;\r\n                tempRide = `${tempRide}Trace`;\r\n                window[tempRide] = {\r\n                    x: graphData[i].TEMPwaitTimeTime,\r\n                    y: graphData[i].TEMPwaitTimeData,\r\n                    name: graphData[i].temp + \" Wait Time\"\r\n                };\r\n                rideTraceArray.push(window[tempRide])\r\n            }\r\n            if(statList.includes(\"Available Seats\"))\r\n            {\r\n                tempRide = graphData[i].temp;\r\n                tempRide = `${tempRide}Trace`;\r\n                window[tempRide] = {\r\n                    x: graphData[i].TEMPavailableSeatsTime,\r\n                    y: graphData[i].TEMPavailableSeatsData,\r\n                    name: graphData[i].temp +  \" Available Seats\"\r\n                };\r\n                rideTraceArray.push(window[tempRide])\r\n            }\r\n            if(statList.includes(\"Available Down\"))\r\n            {\r\n                tempRide = graphData[i].temp;\r\n                tempRide = `${tempRide}Trace`;\r\n                window[tempRide] = {\r\n                    x: graphData[i].TEMPavailableDownTime,\r\n                    y: graphData[i].TEMPavailableDownData,\r\n                    name: graphData[i].temp + \" Available Down\"\r\n                };\r\n                rideTraceArray.push(window[tempRide])\r\n            } \r\n        }\r\n        const unique = [...new Map(rideTraceArray.map(o => [o.name, o])).values()]\r\n        rideTraceArray = unique\r\n    }\r\n\r\n    var title = ''\r\n    for (let i = 0; i < rideList.length; i++) {\r\n        if(rideList.length == 1) {\r\n            if(rideList.length == 1) {\r\n                title = rideList[0] + ' ' + title + '(' + statList + ')'\r\n                if(statList == ''){\r\n                    title = rideList[0]\r\n                }\r\n            }\r\n        }\r\n        else if(rideList.length == 2) {\r\n            title = rideList[0] + ' and ' + rideList[1]\r\n        }\r\n        else if(rideList.length > 2) {\r\n            var tmp = [...new Set(rideList)]\r\n            var last = tmp.pop();\r\n            var result = tmp.join(', ') + ' and ' + last;\r\n            title = result\r\n        }\r\n    }\r\n\r\n    \r\n   \r\n    \r\n    return (\r\n\r\n        <div>\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n            \r\n        }, [])}\r\n        {console.log('recData')}\r\n        {console.log(recData)}\r\n            {graphStat(rideList)}\r\n            {/* {console.log('trace', rideTraceArray), console.log('data', graphData)} */}\r\n            <div id='myDiv'>\r\n            <Plot \r\n            data={rideTraceArray}\r\n            layout={{\r\n                width: 950, height: 570,\r\n                xaxis: {\r\n                title: 'Time',\r\n                type: 'time'\r\n                }, \r\n                yaxis: {\r\n                    title: 'Amount',\r\n                }, \r\n                title: title\r\n            }}\r\n            />\r\n            </div>\t\t\t\t\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Plot from 'react-plotly.js';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      for (let i = 0; i < rideList.length; i++) {\n        const element = rideList[i];\n\n        if (val.ride_name == element) {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        }\n      }\n    });\n  }\n  var data = [];\n  var selected = '';\n\n  const checkStat = () => {\n    //console.log(intervalCard)\n    {\n      intervalCard.map(val => {\n        if (statList == \"Throughput\") {\n          selected = val.Throughput;\n        }\n\n        if (statList == \"Wait Time\") {\n          selected = val.WaitTime;\n        }\n\n        if (statList == \"Available Seats\") {\n          selected = val.AvailableSeats;\n        }\n\n        if (statList == \"Available Down\") {\n          selected = val.AvailableSeats;\n        }\n\n        if (selected != -1) {\n          data.push({\n            x: val.Time,\n            y: selected\n          });\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  function processData(data, redraw) {\n    var y = [],\n        x = [];\n    {\n      intervalCard.map(val => {\n        x.push(val.Time);\n      });\n    }\n    ;\n    var trace1 = {\n      x: x,\n      y: y,\n      mode: 'markers',\n      name: 'Scatter'\n    };\n  }\n\n  var trace1 = {\n    x: [1, 2, 3, 4],\n    y: [10, 15, 13, 17],\n    mode: 'markers',\n    name: 'Scatter'\n  };\n  var trace2 = {\n    x: [2, 3, 4, 5],\n    y: [16, 5, 11, 9],\n    mode: 'lines',\n    name: 'Lines'\n  };\n  var trace3 = {\n    x: [1, 2, 3, 4],\n    y: [12, 9, 15, 12],\n    mode: 'lines+markers',\n    name: 'Scatter + Lines'\n  };\n  var data = [trace1];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Plot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","map","val","key","i","length","element","ride_name","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","selected","checkStat","x","y","sort","a","b","processData","redraw","trace1","mode","name","trace2","trace3","window","addEventListener"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAO,gDAAP;AACA,SAAQC,MAAR,EAAgBC,OAAhB,EAAyBC,iBAAzB,EAA4CC,mBAA5C,EAAiEC,KAAjE,EAAwEC,KAAxE,EAA+EC,cAA/E,QAAoG,WAApG;AACA,SACEC,cADF,EAEEC,mBAFF,EAGEC,oBAHF,QAIO,WAJP;AAKA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AAGjB,MAAI,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAtC;;AAGA,QAAMsB,eAAe,GAAG,MAAM;AAEtBT,IAAAA,KAAK,CAACU,GAAN,CAAW,yCAAX,EAAqDC,IAArD,CAA0DC,GAAG,IAAI;AAC7D;AACAR,MAAAA,WAAW,CAACQ,GAAG,CAACC,IAAL,CAAX;AACH,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAIP,GAND;;AASA,QAAMG,WAAW,GAAG,MAAM;AAEtBlB,IAAAA,KAAK,CAACU,GAAN,CAAW,sCAAX,EAAkDC,IAAlD,CAAuDC,GAAG,IAAI;AAC1D;AACAN,MAAAA,WAAW,CAACM,GAAG,CAACC,IAAL,CAAX;AACH,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAIH,GAND;;AAQA,QAAMI,WAAW,GAAG,MAAM;AAEtBnB,IAAAA,KAAK,CAACU,GAAN,CAAW,wCAAX,EAAoDC,IAApD,CAAyDC,GAAG,IAAI;AAC5D;AACAJ,MAAAA,WAAW,CAACI,GAAG,CAACC,IAAL,CAAX;AACH,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAIH,GAND;;AAUA,MAAIK,YAAY,GAAG,EAAnB;AACA;AAACb,IAAAA,QAAQ,CAACc,GAAT,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,QAAQ,CAACsB,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,cAAME,OAAO,GAAGvB,QAAQ,CAACqB,CAAD,CAAxB;;AACJ,YAAIF,GAAG,CAACK,SAAJ,IAAiBD,OAArB,EAA6B;AACzB,cAAIE,IAAI,GAAG,IAAIC,IAAJ,CAASP,GAAG,CAACQ,EAAb,CAAX;AACA,cAAIC,IAAI,GAAG,IAAIF,IAAJ,CAASP,GAAG,CAACQ,EAAb,EAAiBE,QAAjB,KAA8B,GAA9B,GAAoC,IAAIH,IAAJ,CAASP,GAAG,CAACQ,EAAb,EAAiBG,OAAjB,EAApC,GAAiE,GAAjE,GAAuE,IAAIJ,IAAJ,CAASP,GAAG,CAACQ,EAAb,EAAiBI,WAAjB,EAAlF;AACAd,UAAAA,YAAY,CAACe,IAAb,CAAkB;AAACC,YAAAA,QAAQ,EAAEd,GAAG,CAACK,SAAf;AAA0BU,YAAAA,QAAQ,EAAEf,GAAG,CAACe,QAAxC;AAClBC,YAAAA,UAAU,EAAEhB,GAAG,CAACgB,UADE;AACUC,YAAAA,cAAc,EAAEjB,GAAG,CAACiB,cAD9B;AAElBC,YAAAA,aAAa,EAAElB,GAAG,CAACkB,aAFD;AAEgBC,YAAAA,IAAI,EAAEb,IAFtB;AAE4BC,YAAAA,IAAI,EAAEE;AAFlC,WAAlB;AAGH;AACA;AACH,KAXD;AAWG;AAEJ,MAAIlB,IAAI,GAAG,EAAX;AACA,MAAI6B,QAAQ,GAAG,EAAf;;AAGA,QAAMC,SAAS,GAAG,MAAM;AACpB;AACA;AAACvB,MAAAA,YAAY,CAACC,GAAb,CAAkBC,GAAD,IAAS;AACnB,YAAGjB,QAAQ,IAAI,YAAf,EAA6B;AACzBqC,UAAAA,QAAQ,GAAGpB,GAAG,CAACgB,UAAf;AACH;;AACD,YAAGjC,QAAQ,IAAI,WAAf,EAA4B;AACxBqC,UAAAA,QAAQ,GAAGpB,GAAG,CAACe,QAAf;AACH;;AACD,YAAGhC,QAAQ,IAAI,iBAAf,EAAiC;AAC7BqC,UAAAA,QAAQ,GAAGpB,GAAG,CAACiB,cAAf;AACH;;AACD,YAAGlC,QAAQ,IAAI,gBAAf,EAAiC;AAC7BqC,UAAAA,QAAQ,GAAGpB,GAAG,CAACiB,cAAf;AACH;;AACD,YAAGG,QAAQ,IAAI,CAAC,CAAhB,EACA;AACI7B,UAAAA,IAAI,CAACsB,IAAL,CAAU;AACNS,YAAAA,CAAC,EAAEtB,GAAG,CAACmB,IADD;AAENI,YAAAA,CAAC,EAAEH;AAFG,WAAV;AAIH;AACJ,OApBJ;AAqBC;AACF7B,IAAAA,IAAI,CAACiC,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACH,CAAF,GAAMI,CAAC,CAACJ,CAAT,GAAc,CAAd,GAAmBG,CAAC,CAACH,CAAF,KAAQI,CAAC,CAACJ,CAAX,GAAgB,CAAhB,GAAoB,CAAC,CAA3D;AACH,GAzBD;;AA0BA,WAASK,WAAT,CAAqBpC,IAArB,EAA0BqC,MAA1B,EAAkC;AAC9B,QAAIL,CAAC,GAAG,EAAR;AAAA,QACID,CAAC,GAAG,EADR;AAGI;AAACxB,MAAAA,YAAY,CAACC,GAAb,CAAkBC,GAAD,IAAS;AACvBsB,QAAAA,CAAC,CAACT,IAAF,CAAOb,GAAG,CAACmB,IAAX;AAEH,OAHA;AAGE;AAAA;AACH,QAAIU,MAAM,GAAG;AAETP,MAAAA,CAAC,EAAEA,CAFM;AAGTC,MAAAA,CAAC,EAAEA,CAHM;AAITO,MAAAA,IAAI,EAAE,SAJG;AAKTC,MAAAA,IAAI,EAAE;AALG,KAAb;AAOH;;AAEL,MAAIF,MAAM,GAAG;AAETP,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFM;AAGTC,IAAAA,CAAC,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAHM;AAITO,IAAAA,IAAI,EAAE,SAJG;AAKTC,IAAAA,IAAI,EAAE;AALG,GAAb;AAQE,MAAIC,MAAM,GAAG;AACXV,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADQ;AAEXC,IAAAA,CAAC,EAAE,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,EAAY,CAAZ,CAFQ;AAGXO,IAAAA,IAAI,EAAE,OAHK;AAIXC,IAAAA,IAAI,EAAE;AAJK,GAAb;AAOA,MAAIE,MAAM,GAAG;AACXX,IAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADQ;AAEXC,IAAAA,CAAC,EAAE,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,EAAY,EAAZ,CAFQ;AAGXO,IAAAA,IAAI,EAAE,eAHK;AAIXC,IAAAA,IAAI,EAAE;AAJK,GAAb;AAOA,MAAIxC,IAAI,GAAG,CAAEsC,MAAF,CAAX;AACF,sBAEI;AAAA,eACK/D,SAAS,CAAC,MAAM;AACjB;AAACoE,QAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgCtC,WAAW,EAA3C;AAA+C;AAChD;AAACqC,QAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgChD,eAAe,EAA/C;AAAmD;AACpD;AAAC+C,QAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgCvC,WAAW,EAA3C;AAA+C;AACnD,KAJa,EAIX,EAJW,CADd,eAMI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACA,QAAC,IAAD;AACA,QAAA,IAAI,EAAEL;AADN;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAqBH;;GA5IQX,S;;KAAAA,S;AA8IT,eAAeA,SAAf","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Plot from 'react-plotly.js';\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n\n    var intervalCard = [];\n    {dataList.map((val, key) => {\t\n        for (let i = 0; i < rideList.length; i++) {\n            const element = rideList[i];\n        if (val.ride_name == element){\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n        }\n        }\n     })}\n  \n    var data = []\n    var selected = '';\n\n\n    const checkStat = () => {\t\n        //console.log(intervalCard)\n        {intervalCard.map((val) => {\n                if(statList == \"Throughput\") {\n                    selected = val.Throughput\n                }\n                if(statList == \"Wait Time\") {\n                    selected = val.WaitTime\n                }\n                if(statList == \"Available Seats\"){\n                    selected = val.AvailableSeats\n                }\n                if(statList == \"Available Down\") {\n                    selected = val.AvailableSeats\n                }\n                if(selected != -1) \n                {\n                    data.push({\n                        x: val.Time,\n                        y: selected\n                    })\n                }\n            }\n        )}\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n    }\n    function processData(data,redraw) {\n        var y = [],\n            x = [];\n    \n            {intervalCard.map((val) => {\n                x.push(val.Time)\n\n            })};\n            var trace1 = {\n        \n                x: x,\n                y: y,\n                mode: 'markers',\n                name: 'Scatter'\n              };\n        }\n    \n    var trace1 = {\n        \n        x: [1, 2, 3, 4],\n        y: [10, 15, 13, 17],\n        mode: 'markers',\n        name: 'Scatter'\n      };\n      \n      var trace2 = {\n        x: [2, 3, 4, 5],\n        y: [16, 5, 11, 9],\n        mode: 'lines',\n        name: 'Lines'\n      };\n      \n      var trace3 = {\n        x: [1, 2, 3, 4],\n        y: [12, 9, 15, 12],\n        mode: 'lines+markers',\n        name: 'Scatter + Lines'\n      };\n      \n      var data = [ trace1];\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            <div className=\"App\">\n            <Plot \n            data={data}\n            >\n\n\n\n\n            </Plot>\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
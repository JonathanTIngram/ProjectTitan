{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var showRideList = () => {\n    rideList.map((val, key) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            var minutes = new Date(d).getMinutes();\n\n            if (minutes < 10) {\n              minutes = \"0\" + minutes;\n            }\n\n            return new Date(d).getHours() + \":\" + minutes;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: selected,\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), rideList.map(i => {\n          {\n            checkStat(i);\n          }\n          return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n            data: data,\n            onValueMouseOver: (datapoint, event) => {\n              console.log(datapoint);\n            },\n            curve: 'curveMonotoneX',\n            color: \"#ADDDE1\",\n            markStyle: {\n              stroke: 'black'\n            },\n            style: {\n              strokeLinejoin: \"round\"\n            },\n            strokeStyle: \"solid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this);\n        })]\n      }, void 0, true);\n    });\n  };\n\n  var nameSwitch;\n  var intervalCard = [];\n  var intervalCard1 = [];\n\n  for (let i = 0; i < rideList.length; i++) {\n    var tempName = rideList[i];\n\n    if (i > 0) {\n      var lastName = rideList[i - 1];\n    }\n\n    var checked = false;\n    {\n      dataList.map((val, key) => {\n        if (val.ride_name == tempName) {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        } else {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard1.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        }\n\n        if (i > 0) {\n          if (val.ride_name != lastName && !checked) {\n            checked = true;\n            nameSwitch = key + 1;\n            console.log(`Ride name switches at index: ${key + 1}`);\n          }\n        }\n      });\n    }\n  }\n\n  var counter = 0;\n  var data = [];\n  var data1 = [];\n  var selected = '';\n\n  const checkStat = ride => {\n    console.log(\"intervalCard\");\n    console.log(intervalCard);\n    console.log(\"intervalCard1\");\n    console.log(intervalCard1);\n    {\n      intervalCard.map((val, key) => {\n        if (key < nameSwitch) {\n          console.log(key);\n          console.log(nameSwitch);\n\n          if (val.rideName == ride) {\n            if (statList == \"Throughput\") {\n              selected = val.Throughput;\n            }\n\n            if (statList == \"Wait Time\") {\n              selected = val.WaitTime;\n            }\n\n            if (statList == \"Available Seats\") {\n              selected = val.AvailableSeats;\n            }\n\n            if (statList == \"Available Down\") {\n              selected = val.AvailableSeats;\n            }\n\n            if (selected != -1) {\n              data.push({\n                x: val.Time,\n                y: selected\n              });\n            }\n          }\n        }\n      });\n    }\n    {\n      intervalCard1.map((val, key) => {\n        if (val.rideName == ride) {\n          if (statList == \"Throughput\") {\n            selected = val.Throughput;\n          }\n\n          if (statList == \"Wait Time\") {\n            selected = val.WaitTime;\n          }\n\n          if (statList == \"Available Seats\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (statList == \"Available Down\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (selected != -1) {\n            data1.push({\n              x: val.Time,\n              y: selected\n            });\n          }\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n    data1.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n    console.log(data);\n    console.log(data1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, [0]), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: rideList.map((val, key) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n            height: 500,\n            width: 900,\n            xType: \"ordinal\",\n            children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              title: \"Time of interval card\",\n              style: {\n                line: {\n                  stroke: 'black'\n                },\n                text: {\n                  stroke: 'none',\n                  fill: '#6b6b76',\n                  fontWeight: 600\n                }\n              },\n              tickLabelAngle: -25,\n              tickFormat: d => {\n                var minutes = new Date(d).getMinutes();\n\n                if (minutes < 10) {\n                  minutes = \"0\" + minutes;\n                }\n\n                return new Date(d).getHours() + \":\" + minutes;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              title: selected,\n              style: {\n                line: {\n                  stroke: 'black'\n                },\n                text: {\n                  stroke: 'none',\n                  fill: '#6b6b76',\n                  fontWeight: 600\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 21\n            }, this), rideList.map((i, key) => {\n              {\n                checkStat(i);\n              }\n\n              if (counter < 1) {\n                counter++;\n                return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n                  data: data,\n                  onValueMouseOver: (datapoint, event) => {\n                    console.log(datapoint);\n                  },\n                  curve: 'curveMonotoneX',\n                  color: \"#ADDDE1\",\n                  markStyle: {\n                    stroke: 'black'\n                  },\n                  style: {\n                    strokeLinejoin: \"round\"\n                  },\n                  strokeStyle: \"solid\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 25\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n                  data: data1,\n                  onValueMouseOver: (datapoint, event) => {\n                    console.log(datapoint);\n                  },\n                  curve: 'curveMonotoneX',\n                  color: \"red\",\n                  markStyle: {\n                    stroke: 'black'\n                  },\n                  style: {\n                    strokeLinejoin: \"round\"\n                  },\n                  strokeStyle: \"solid\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 29\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 21\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","showRideList","map","val","key","line","stroke","text","fill","fontWeight","d","minutes","Date","getMinutes","getHours","selected","i","checkStat","datapoint","event","strokeLinejoin","nameSwitch","intervalCard","intervalCard1","length","tempName","lastName","checked","ride_name","time","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","counter","data1","ride","x","y","sort","a","b","window","addEventListener"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { Component, useState, useEffect} from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\r\nimport {\r\n  FlexibleXYPlot,\r\n  FlexibleWidthXYPlot,\r\n  FlexibleHeightXYPlot\r\n} from 'react-vis';\r\nimport Axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nfunction ChartLine() {\r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n\r\n\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    var showRideList = () => {\r\n\r\n\r\n        rideList.map((val, key) => {\r\n\r\n            return (\r\n\r\n                    <>\r\n                                            <VerticalGridLines />\r\n                <HorizontalGridLines />\r\n\r\n                <XAxis title=\"Time of interval card\"\r\n                style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                    \r\n                  }}\r\n                tickLabelAngle={-25} \r\n                tickFormat={d => {\r\n                var minutes = new Date(d).getMinutes();\r\n                if(minutes < 10){\r\n                    minutes = \"0\" + minutes;\r\n                }\r\n                 return new Date(d).getHours()+ \":\" + minutes\r\n                }}\r\n                />\r\n                <YAxis title={selected}\r\n                 style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                  }}/>\r\n            {rideList.map((i) => {\r\n                {checkStat(i)}\r\n                return (\r\n                    <LineMarkSeries \r\n                 \r\n                    data={data} \r\n                    onValueMouseOver={(datapoint, event)=>{\r\n                        console.log(datapoint)\r\n                      }}\r\n                      \r\n                    curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n                    markStyle={{stroke: 'black'}}\r\n                    style={{ strokeLinejoin: \"round\"}}\r\n                    strokeStyle=\"solid\"/>\r\n                )\r\n                })}\r\n                    \r\n                    </>\r\n                \r\n                \r\n            );\r\n        });\r\n        \r\n    }\r\n\r\n\r\n    var nameSwitch;\r\n    var intervalCard = [];\r\n    var intervalCard1 = [];\r\n    for(let i =0; i < rideList.length; i++)\r\n    {\r\n        var tempName = rideList[i];\r\n        if(i > 0)\r\n        {\r\n            var lastName = rideList[i - 1]\r\n        }\r\n        var checked = false;\r\n    {dataList.map((val, key) => {\t\r\n\r\n\r\n        if (val.ride_name == tempName)\r\n        {\r\n            var time = new Date(val.ts)\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n        }\r\n        else \r\n        {\r\n            var time = new Date(val.ts)\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            intervalCard1.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n        }\r\n        if(i > 0)\r\n        {\r\n            if(val.ride_name != lastName && !checked) \r\n            {\r\n                checked = true;\r\n                nameSwitch = key + 1;\r\n                console.log(`Ride name switches at index: ${key + 1}`)\r\n            }\r\n        }\r\n    })}}\r\n\r\n    var counter = 0;\r\n\r\n    var data = [];\r\n    var data1 = [];\r\n    var selected = '';\r\n    const checkStat = (ride) => {\t\r\n        console.log(\"intervalCard\")\r\n        console.log(intervalCard)\r\n        console.log(\"intervalCard1\")\r\n        console.log(intervalCard1)\r\n        {intervalCard.map((val,key) => {\r\n            if(key < nameSwitch)\r\n                {\r\n                    console.log(key)\r\n                    console.log(nameSwitch)\r\n            if(val.rideName == ride){\r\n            if(statList == \"Throughput\") {\r\n                selected = val.Throughput\r\n            }\r\n            if(statList == \"Wait Time\") {\r\n                selected = val.WaitTime\r\n            }\r\n            if(statList == \"Available Seats\"){\r\n                selected = val.AvailableSeats\r\n            }\r\n            if(statList == \"Available Down\") {\r\n                selected = val.AvailableSeats\r\n            }\r\n            if(selected != -1) \r\n            {\r\n                data.push({\r\n                    x: val.Time,\r\n                    y: selected\r\n                })\r\n            }}\r\n        }})}\r\n        {intervalCard1.map((val,key) => {\r\n      \r\n            if(val.rideName == ride){\r\n                if(statList == \"Throughput\") {\r\n                    selected = val.Throughput\r\n                }\r\n                if(statList == \"Wait Time\") {\r\n                    selected = val.WaitTime\r\n                }\r\n                if(statList == \"Available Seats\"){\r\n                    selected = val.AvailableSeats\r\n                }\r\n                if(statList == \"Available Down\") {\r\n                    selected = val.AvailableSeats\r\n                }\r\n                if(selected != -1) \r\n                {\r\n                    data1.push({\r\n                        x: val.Time,\r\n                        y: selected\r\n                    })\r\n                }}\r\n        })}\r\n        \r\n        \r\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\r\n        data1.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\r\n        console.log(data)\r\n        console.log(data1)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n        }, [0])}\r\n\r\n\r\n\r\n\r\n            <div className=\"App\">\r\n\r\n            {rideList.map((val, key) => {\r\n\r\n                return (\r\n                    <>\r\n                    <FlexibleXYPlot height={500} width={900} xType=\"ordinal\">\r\n\r\n\r\n\r\n                    <VerticalGridLines />\r\n                    <HorizontalGridLines />\r\n\r\n                    <XAxis title=\"Time of interval card\"\r\n                    style={{\r\n                        line: {stroke: 'black'},\r\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                        \r\n                    }}\r\n                    tickLabelAngle={-25} \r\n                    tickFormat={d => {\r\n                    var minutes = new Date(d).getMinutes();\r\n                    if(minutes < 10){\r\n                        minutes = \"0\" + minutes;\r\n                    }\r\n                    return new Date(d).getHours()+ \":\" + minutes\r\n                    }}\r\n                    />\r\n                    <YAxis title={selected}\r\n                    style={{\r\n                        line: {stroke: 'black'},\r\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                    }}/>\r\n                    {rideList.map((i , key) => {\r\n                    {checkStat(i)}\r\n                    if(counter < 1)\r\n                    {\r\n                        counter++;\r\n                        return (\r\n                        <LineMarkSeries \r\n                    \r\n                        data={data} \r\n                        onValueMouseOver={(datapoint, event)=>{\r\n                            console.log(datapoint)\r\n                        }}\r\n                        \r\n                        curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n                        markStyle={{stroke: 'black'}}\r\n                        style={{ strokeLinejoin: \"round\"}}\r\n                        strokeStyle=\"solid\"/>\r\n                    )}\r\n                    else{\r\n                        return (\r\n                            <LineMarkSeries \r\n                        \r\n                            data={data1} \r\n                            onValueMouseOver={(datapoint, event)=>{\r\n                                console.log(datapoint)\r\n                            }}\r\n                            \r\n                            curve={'curveMonotoneX'} color=\"red\"\r\n                            markStyle={{stroke: 'black'}}\r\n                            style={{ strokeLinejoin: \"round\"}}\r\n                            strokeStyle=\"solid\"/>\r\n                        )\r\n                    }\r\n                    \r\n                    })}\r\n                    </FlexibleXYPlot>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                    \r\n                                </div>\t\t\t\t\r\n                            </div>\r\n                        );\r\n                        \r\n                    }\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
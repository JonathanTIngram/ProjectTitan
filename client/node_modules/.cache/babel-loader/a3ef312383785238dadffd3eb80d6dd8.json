{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      var time = new Date(val.ts);\n      var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n      intervalCard.push({\n        rideName: val.ride_name,\n        WaitTime: val.WaitTime,\n        Throughput: val.Throughput,\n        AvailableSeats: val.AvailableSeats,\n        AvailableDown: val.AvailableDown,\n        Time: time,\n        Date: date\n      });\n    });\n  }\n  var data = [];\n  var selected = '';\n\n  const splitData = () => {\n    var output = [];\n    var i = 0;\n    {\n      intervalCard.map(val => {\n        console.log(rideList[i], \"select\");\n        console.log(val.rideName, \"val\");\n\n        if (rideList[i] != val.rideName) {\n          output.push(val);\n          i++;\n        }\n      });\n    }\n    console.log(output);\n  };\n\n  const checkStat = () => {\n    //console.log(intervalCard)\n    {\n      intervalCard.map(val => {\n        if (statList == \"Throughput\") {\n          selected = val.Throughput;\n        }\n\n        if (statList == \"Wait Time\") {\n          selected = val.WaitTime;\n        }\n\n        if (statList == \"Available Seats\") {\n          selected = val.AvailableSeats;\n        }\n\n        if (statList == \"Available Down\") {\n          selected = val.AvailableSeats;\n        }\n\n        if (selected != -1) {\n          data.push({\n            x: val.Time,\n            y: selected\n          });\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), checkStat(), splitData(), console.log(intervalCard), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n        height: 500,\n        width: 900,\n        xType: \"time\",\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            var minutes = new Date(d).getMinutes();\n\n            if (minutes < 10) {\n              minutes = \"0\" + minutes;\n            }\n\n            return new Date(d).getHours() + \":\" + minutes;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: '',\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n          data: data,\n          onValueMouseOver: (datapoint, event) => {\n            console.log(datapoint);\n          },\n          curve: 'curveMonotoneX',\n          color: \"#ADDDE1\",\n          markStyle: {\n            stroke: 'black'\n          },\n          style: {\n            strokeLinejoin: \"round\"\n          },\n          strokeStyle: \"solid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","map","val","key","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","ride_name","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","selected","splitData","output","i","checkStat","x","y","sort","a","b","window","addEventListener","line","stroke","text","fill","fontWeight","d","minutes","getMinutes","getHours","datapoint","event","strokeLinejoin"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n\n    var intervalCard = [];\n    {dataList.map((val, key) => {\t\n\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n     })}\n  \n    var data = []\n    var selected = '';\n\n\n    const splitData = () => {\n        var output = []\n        var i = 0;\n        {intervalCard.map((val) => {\n            console.log(rideList[i], \"select\")\n            console.log(val.rideName, \"val\")\n                if(rideList[i] != val.rideName) {\n                    output.push(val)\n                    i++\n                }\n        })}\n        console.log(output)\n    }\n    const checkStat = () => {\t\n        //console.log(intervalCard)\n        {intervalCard.map((val) => {\n                if(statList == \"Throughput\") {\n                    selected = val.Throughput\n                }\n                if(statList == \"Wait Time\") {\n                    selected = val.WaitTime\n                }\n                if(statList == \"Available Seats\"){\n                    selected = val.AvailableSeats\n                }\n                if(statList == \"Available Down\") {\n                    selected = val.AvailableSeats\n                }\n                if(selected != -1) \n                {\n                    data.push({\n                        x: val.Time,\n                        y: selected\n                    })\n                }\n            }\n        )}\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n    }\n\n\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {checkStat()}\n            {splitData()}\n            {console.log(intervalCard)}\n            <div className=\"App\">\n             <FlexibleXYPlot height={500} width={900} xType=\"time\">\n                <VerticalGridLines />\n                <HorizontalGridLines />\n\n                <XAxis title=\"Time of interval card\"\n                style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                    \n                  }}\n                tickLabelAngle={-25} \n                tickFormat={d => {\n                var minutes = new Date(d).getMinutes();\n                if(minutes < 10){\n                    minutes = \"0\" + minutes;\n                }\n                 return new Date(d).getHours()+ \":\" + minutes\n                }}\n                />\n                <YAxis title={''}\n                 style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                  }}/>\n                    <LineMarkSeries \n                    data={data} \n                    onValueMouseOver={(datapoint, event)=>{\n                        console.log(datapoint)\n                      }}\n                      \n                    curve={'curveMonotoneX'} color=\"#ADDDE1\"\n                    markStyle={{stroke: 'black'}}\n                    style={{ strokeLinejoin: \"round\"}}\n                    strokeStyle=\"solid\"/>\n                \n            </FlexibleXYPlot>\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
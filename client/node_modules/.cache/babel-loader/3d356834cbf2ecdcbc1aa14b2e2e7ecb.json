{"ast":null,"code":"var _jsxFileName = \"/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport Plot from 'react-plotly.js';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const splitData = () => {\n    var flags = [],\n        output = [];\n\n    for (let i = 0; i < intervalCard.length; i++) {\n      if (flags[intervalCard[i].rideName]) continue;\n      flags[intervalCard[i].rideName] = true;\n      output.push(intervalCard[i].rideName);\n    }\n\n    console.log(output);\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  var intervalCard1 = [];\n\n  for (let i = 0; i < rideList.length; i++) {\n    var tempName = rideList[i];\n    {\n      dataList.map((val, key) => {\n        var rideArray = `rideArray${i}`;\n\n        if (val.ride_name == tempName) {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        }\n\n        if (i > 0) {\n          var lastName = rideList[i - 1];\n\n          if (tempName != lastName) {}\n        }\n      });\n    }\n  } //  const compareRide = () => {\n  //     for(var i = 0; i < index; i++) {\n  //         //check box list is compared with collected data\n  //         if(rideList.includes(rList[i])) {\n  //             console.log(\"Matched \", rList[i]);\n  //             check = true;\n  //             //each variable is compared with the selected stat\n  //             if(statList.includes(\"Wait Time\"))\n  //             {\n  //                 //locate variable\n  //                 if(wList[i] != -1) {\n  //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n  //                  } \n  //             }\n  //             if(statList.includes(\"Throughput\"))\n  //             {\n  //                  //locate variable\n  //                 if(tList[i] != -1) {\n  //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n  //                 }\n  //             }\n  //             if(statList.includes(\"Available Seats\"))\n  //             {\n  //                  //locate variable\n  //                 if(asList[i] != -1) {\n  //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n  //                 }\n  //             }   \n  //             if(statList.includes(\"Available Down\"))\n  //             {\n  //                  //locate variable\n  //                 if(adList[i] != -1) {\n  //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n  //                 }\n  //             }\n  //             console.log('');\n  //         }\n  //     }\n  // }\n\n\n  var rideData = [];\n  var selected = '';\n\n  const checkStat = ride => {\n    console.log(intervalCard);\n    console.log(intervalCard1);\n    {\n      intervalCard.map(val => {\n        if (val.rideName == 'Superman') {\n          if (statList == \"Throughput\") {\n            selected = val.Throughput;\n          }\n\n          if (statList == \"Wait Time\") {\n            selected = val.WaitTime;\n          }\n\n          if (statList == \"Available Seats\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (statList == \"Available Down\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (selected != -1) {\n            console.log(val.rideName);\n            rideData.push({\n              x: val.Time,\n              y: selected\n            });\n          }\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  var showRideList = () => {\n    rideList.map((key, val) => {});\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), window.addEventListener('load', splitData()), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          type: 'line',\n          rideData,\n          marker: {\n            color: 'blue'\n          }\n        }],\n        layout: {\n          width: 320,\n          height: 240,\n          title: 'A Fancy Plot'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","Plot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","splitData","flags","output","i","intervalCard","length","rideName","push","CheckedData","intervalCard1","tempName","map","val","key","rideArray","ride_name","time","Date","ts","date","getMonth","getDate","getFullYear","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","lastName","rideData","selected","checkStat","ride","x","y","sort","a","b","showRideList","window","addEventListener","type","marker","color","width","height","title"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport Plot from 'react-plotly.js';\n\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n    const splitData = () => {\n        var flags = [], output = []\n        for(let i=0; i < intervalCard.length; i++) {\n            if( flags[intervalCard[i].rideName]) continue;\n            flags[intervalCard[i].rideName] = true;\n            output.push(intervalCard[i].rideName);\n        }\n       console.log(output)\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n\n\n    var intervalCard = [];\n    var intervalCard1 = [];\n    for(let i =0; i < rideList.length; i++)\n    {\n        var tempName = rideList[i];\n\n    {dataList.map((val, key) => {\t\n\n     var rideArray = `rideArray${i}`\n\n     if (val.ride_name == tempName){\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n        }\n        if(i > 0)\n        {\n            var lastName = rideList[i -1]\n            if(tempName != lastName)\n            {\n                \n            }\n        }\n    })}}\n\n    \n    //  const compareRide = () => {\n    //     for(var i = 0; i < index; i++) {\n    //         //check box list is compared with collected data\n    //         if(rideList.includes(rList[i])) {\n    //             console.log(\"Matched \", rList[i]);\n    //             check = true;\n    //             //each variable is compared with the selected stat\n    //             if(statList.includes(\"Wait Time\"))\n    //             {\n    //                 //locate variable\n    //                 if(wList[i] != -1) {\n    //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n         \n\n    //                  } \n    //             }\n    //             if(statList.includes(\"Throughput\"))\n    //             {\n    //                  //locate variable\n    //                 if(tList[i] != -1) {\n    //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n   \n    //                 }\n    //             }\n    //             if(statList.includes(\"Available Seats\"))\n    //             {\n    //                  //locate variable\n    //                 if(asList[i] != -1) {\n    //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n\n    //                 }\n    //             }   \n    //             if(statList.includes(\"Available Down\"))\n    //             {\n    //                  //locate variable\n    //                 if(adList[i] != -1) {\n    //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n      \n    //                 }\n    //             }\n\n                \n    //             console.log('');\n    //         }\n    //     }\n    // }\n     \n    var rideData = []\n    var selected = '';\n    const checkStat = (ride) => {\t\n        console.log(intervalCard)\n        console.log(intervalCard1)\n        {intervalCard.map((val) => {\n            if(val.rideName == 'Superman'){\n                if(statList == \"Throughput\") {\n                    selected = val.Throughput\n                }\n                if(statList == \"Wait Time\") {\n                    selected = val.WaitTime\n                }\n                if(statList == \"Available Seats\"){\n                    selected = val.AvailableSeats\n                }\n                if(statList == \"Available Down\") {\n                    selected = val.AvailableSeats\n                }\n                if(selected != -1) \n                {\n                    console.log(val.rideName)\n                    rideData.push({\n                        x: val.Time,\n                        y: selected\n                    })\n                }\n        }\n        })}\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n    }\n\n\n    var showRideList = () => {\n\n        rideList.map((key, val) => {\n            \n        })\n    }\n\n      \n\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {window.addEventListener('load', splitData())}\n\n\n\n\n            <div className=\"App\">\n\n\n\n\n            <Plot\n                data={[\n\n\n                {type: 'line', rideData, marker: {color: 'blue'}}\n                ]}\n                layout={{width: 320, height: 240, title: 'A Fancy Plot'}}\n            />\n                    \n\n\n\n                    \n                                </div>\t\t\t\t\n                            </div>\n                        );\n                        \n                    }\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
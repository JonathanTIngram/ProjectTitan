{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var showRideList = () => {// rideList.map((val, key) => {\n    //     return (\n    //             <>\n    //                                     <VerticalGridLines />\n    //         <HorizontalGridLines />\n    //         <XAxis title=\"Time of interval card\"\n    //         style={{\n    //             line: {stroke: 'black'},\n    //             text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n    //           }}\n    //         tickLabelAngle={-25} \n    //         tickFormat={d => {\n    //         var minutes = new Date(d).getMinutes();\n    //         if(minutes < 10){\n    //             minutes = \"0\" + minutes;\n    //         }\n    //          return new Date(d).getHours()+ \":\" + minutes\n    //         }}\n    //         />\n    //         <YAxis title={selected}\n    //          style={{\n    //             line: {stroke: 'black'},\n    //             text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n    //           }}/>\n    //     {rideList.map((i) => {\n    //         {checkStat(i)}\n    //         return (\n    //             <LineMarkSeries \n    //             data={data} \n    //             onValueMouseOver={(datapoint, event)=>{\n    //                 console.log(datapoint)\n    //               }}\n    //             curve={'curveMonotoneX'} color=\"#ADDDE1\"\n    //             markStyle={{stroke: 'black'}}\n    //             style={{ strokeLinejoin: \"round\"}}\n    //             strokeStyle=\"solid\"/>\n    //         )\n    //         })}\n    //             </>\n    //     );\n    // });\n  };\n\n  var intervalCard = [];\n  var intervalCard1 = [];\n\n  for (let i = 0; i < rideList.length; i++) {\n    var tempName = rideList[i];\n    {\n      dataList.map((val, key) => {\n        if (val.ride_name == tempName) {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        }\n\n        if (i > 0) {\n          var lastName = rideList[i - 1];\n\n          if (tempName != lastName) {}\n        }\n      });\n    }\n  }\n\n  var data = [];\n  var selected = '';\n\n  const checkStat = ride => {\n    console.log(intervalCard);\n    console.log(intervalCard1);\n    {\n      intervalCard.map(val => {\n        if (val.rideName == ride) {\n          if (statList == \"Throughput\") {\n            selected = val.Throughput;\n          }\n\n          if (statList == \"Wait Time\") {\n            selected = val.WaitTime;\n          }\n\n          if (statList == \"Available Seats\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (statList == \"Available Down\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (selected != -1) {\n            data.push({\n              x: val.Time,\n              y: selected\n            });\n          }\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: rideList.map((val, key) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n            height: 500,\n            width: 900,\n            xType: \"time\",\n            children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              title: \"Time of interval card\",\n              style: {\n                line: {\n                  stroke: 'black'\n                },\n                text: {\n                  stroke: 'none',\n                  fill: '#6b6b76',\n                  fontWeight: 600\n                }\n              },\n              tickLabelAngle: -25,\n              tickFormat: d => {\n                var minutes = new Date(d).getMinutes();\n\n                if (minutes < 10) {\n                  minutes = \"0\" + minutes;\n                }\n\n                return new Date(d).getHours() + \":\" + minutes;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              title: selected,\n              style: {\n                line: {\n                  stroke: 'black'\n                },\n                text: {\n                  stroke: 'none',\n                  fill: '#6b6b76',\n                  fontWeight: 600\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 21\n            }, this), rideList.map(i => {\n              {\n                checkStat(i);\n              }\n              return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n                data: data,\n                onValueMouseOver: (datapoint, event) => {\n                  console.log(datapoint);\n                },\n                curve: 'curveMonotoneX',\n                color: \"#ADDDE1\",\n                markStyle: {\n                  stroke: 'black'\n                },\n                style: {\n                  strokeLinejoin: \"round\"\n                },\n                strokeStyle: \"solid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 25\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 21\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","showRideList","intervalCard","intervalCard1","i","length","tempName","map","val","key","ride_name","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","lastName","selected","checkStat","ride","x","y","sort","a","b","window","addEventListener","line","stroke","text","fill","fontWeight","d","minutes","getMinutes","getHours","datapoint","event","strokeLinejoin"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { Component, useState, useEffect} from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\r\nimport {\r\n  FlexibleXYPlot,\r\n  FlexibleWidthXYPlot,\r\n  FlexibleHeightXYPlot\r\n} from 'react-vis';\r\nimport Axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nfunction ChartLine() {\r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n\r\n\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    var showRideList = () => {\r\n\r\n\r\n        // rideList.map((val, key) => {\r\n\r\n        //     return (\r\n\r\n        //             <>\r\n        //                                     <VerticalGridLines />\r\n        //         <HorizontalGridLines />\r\n\r\n        //         <XAxis title=\"Time of interval card\"\r\n        //         style={{\r\n        //             line: {stroke: 'black'},\r\n        //             text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                    \r\n        //           }}\r\n        //         tickLabelAngle={-25} \r\n        //         tickFormat={d => {\r\n        //         var minutes = new Date(d).getMinutes();\r\n        //         if(minutes < 10){\r\n        //             minutes = \"0\" + minutes;\r\n        //         }\r\n        //          return new Date(d).getHours()+ \":\" + minutes\r\n        //         }}\r\n        //         />\r\n        //         <YAxis title={selected}\r\n        //          style={{\r\n        //             line: {stroke: 'black'},\r\n        //             text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n        //           }}/>\r\n        //     {rideList.map((i) => {\r\n        //         {checkStat(i)}\r\n        //         return (\r\n        //             <LineMarkSeries \r\n                 \r\n        //             data={data} \r\n        //             onValueMouseOver={(datapoint, event)=>{\r\n        //                 console.log(datapoint)\r\n        //               }}\r\n                      \r\n        //             curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n        //             markStyle={{stroke: 'black'}}\r\n        //             style={{ strokeLinejoin: \"round\"}}\r\n        //             strokeStyle=\"solid\"/>\r\n        //         )\r\n        //         })}\r\n                    \r\n        //             </>\r\n                \r\n                \r\n        //     );\r\n        // });\r\n        \r\n    }\r\n\r\n\r\n\r\n    var intervalCard = [];\r\n    var intervalCard1 = [];\r\n    for(let i =0; i < rideList.length; i++)\r\n    {\r\n        var tempName = rideList[i];\r\n\r\n    {dataList.map((val, key) => {\t\r\n\r\n\r\n     if (val.ride_name == tempName){\r\n            var time = new Date(val.ts)\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n        }\r\n        if(i > 0)\r\n        {\r\n            var lastName = rideList[i -1]\r\n            if(tempName != lastName)\r\n            {\r\n                \r\n            }\r\n        }\r\n    })}}\r\n\r\n\r\n    var data = []\r\n    var selected = '';\r\n    const checkStat = (ride) => {\t\r\n        console.log(intervalCard)\r\n        console.log(intervalCard1)\r\n        {intervalCard.map((val) => {\r\n            if(val.rideName == ride){\r\n            if(statList == \"Throughput\") {\r\n                selected = val.Throughput\r\n            }\r\n            if(statList == \"Wait Time\") {\r\n                selected = val.WaitTime\r\n            }\r\n            if(statList == \"Available Seats\"){\r\n                selected = val.AvailableSeats\r\n            }\r\n            if(statList == \"Available Down\") {\r\n                selected = val.AvailableSeats\r\n            }\r\n            if(selected != -1) \r\n            {\r\n                data.push({\r\n                    x: val.Time,\r\n                    y: selected\r\n                })\r\n            }\r\n        }\r\n        })}\r\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n        }, [])}\r\n\r\n\r\n\r\n\r\n            <div className=\"App\">\r\n\r\n            {rideList.map((val, key) => {\r\n\r\n                return (\r\n                    <>\r\n                    <FlexibleXYPlot height={500} width={900} xType=\"time\">\r\n\r\n\r\n\r\n                    <VerticalGridLines />\r\n                    <HorizontalGridLines />\r\n\r\n                    <XAxis title=\"Time of interval card\"\r\n                    style={{\r\n                        line: {stroke: 'black'},\r\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                        \r\n                    }}\r\n                    tickLabelAngle={-25} \r\n                    tickFormat={d => {\r\n                    var minutes = new Date(d).getMinutes();\r\n                    if(minutes < 10){\r\n                        minutes = \"0\" + minutes;\r\n                    }\r\n                    return new Date(d).getHours()+ \":\" + minutes\r\n                    }}\r\n                    />\r\n                    <YAxis title={selected}\r\n                    style={{\r\n                        line: {stroke: 'black'},\r\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                    }}/>\r\n                    {rideList.map((i) => {\r\n                    {checkStat(i)}\r\n                    return (\r\n                        <LineMarkSeries \r\n                    \r\n                        data={data} \r\n                        onValueMouseOver={(datapoint, event)=>{\r\n                            console.log(datapoint)\r\n                        }}\r\n                        \r\n                        curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n                        markStyle={{stroke: 'black'}}\r\n                        style={{ strokeLinejoin: \"round\"}}\r\n                        strokeStyle=\"solid\"/>\r\n                    )\r\n                    })}\r\n                    </FlexibleXYPlot>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                    \r\n                                </div>\t\t\t\t\r\n                            </div>\r\n                        );\r\n                        \r\n                    }\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
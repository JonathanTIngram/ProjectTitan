{"ast":null,"code":"var _jsxFileName = \"/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  let index = 0;\n  var rList = [];\n  var wList = [];\n  var tList = [];\n  var asList = [];\n  var adList = [];\n  var timeList = [];\n  var dateList = [];\n  {\n    dataList.map((val, key) => {\n      if (val.ride_name) {\n        var minutes = new Date(val.ts).getMinutes();\n\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n\n        var time = new Date(val.ts).getHours() + \":\" + minutes;\n        var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n        console.log(\"Ride name = \", val.ride_name);\n        console.log(\"Time = \", time);\n        console.log(\"Date = \", date);\n        rList.push(val.ride_name);\n        timeList.push(time);\n        dateList.push(date);\n        console.log(\"Wait Time = \", val.WaitTime);\n        wList.push(val.WaitTime);\n        console.log(\"Throughput = \", val.Throughput);\n        tList.push(val.Throughput);\n        console.log(\"Available Seats = \", val.AvailableSeats);\n        asList.push(val.AvailableSeats);\n        console.log(\"Available Down = \", val.AvailableDown);\n        adList.push(val.AvailableDown);\n        console.log('');\n      }\n    });\n  }\n\n  const compareRide = () => {\n    for (var i = 0; i < index; i++) {\n      //check box list is compared with collected data\n      if (rideList.includes(rList[i])) {\n        console.log(\"Matched \", rList[i]); //each variable is compared with the selected stat\n\n        if (statList.includes(\"Wait Time\")) {\n          //locate variable\n          if (wList[i] != -1) {\n            console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n          }\n        }\n\n        if (statList.includes(\"Throughput\")) {\n          //locate variable\n          if (tList[i] != -1) {\n            console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n          }\n        }\n\n        if (statList.includes(\"Available Seats\")) {\n          //locate variable\n          if (asList[i] != -1) {\n            console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n          }\n        }\n\n        if (statList.includes(\"Available Down\")) {\n          //locate variable\n          if (adList[i] != -1) {\n            console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n          }\n        }\n\n        console.log('');\n      }\n    }\n  };\n\n  var data = [];\n\n  const eachStat = list => {\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] != -1) {\n        data.push({\n          x: timeList[i],\n          y: list[i]\n        });\n        data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n      }\n    }\n  };\n\n  const selectedRide = () => {\n    var count = 0;\n\n    for (let i = 0; i < rList.length; i++) {\n      var element = rList[i];\n\n      if (rideList.includes(element)) {\n        console.log(rideList.includes(element));\n        count++;\n      }\n    }\n\n    console.log(count);\n  };\n\n  const selectedStat = list => {\n    if (list == \"Throughput\") {\n      eachStat(tList);\n    }\n\n    if (list == \"Wait Time\") {\n      eachStat(wList);\n    }\n\n    if (list == \"Available Seats\") {\n      eachStat(asList);\n    }\n\n    if (list == \"Available Down\") {\n      eachStat(adList);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), console.log(\"Amount of rides \", index), console.log(\"Ride names = \", rList), console.log(\"TimeList = \", timeList), console.log(\"DateList = \", dateList), console.log(\"WaitList = \", wList), console.log(\"ThroughputList = \", tList), console.log(\"AvailableSeatList = \", asList), console.log(\"AvailableDownList = \", adList), selectedRide(), selectedStat(statList), compareRide(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: rideList.map((val, key) => {\n        {\n          console.log(`This is inside the map the val is: ${val}`);\n        }\n\n        /*#__PURE__*/\n        _jsxDEV(FlexibleXYPlot, {\n          height: 500,\n          width: 900,\n          xType: \"ordinal\",\n          children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            title: \"Time of interval card\",\n            style: {\n              line: {\n                stroke: 'black'\n              },\n              text: {\n                stroke: 'none',\n                fill: '#6b6b76',\n                fontWeight: 600\n              }\n            },\n            tickTotal: data.length,\n            tickLabelAngle: -25,\n            tickFormat: d => {\n              return d;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            title: statList,\n            style: {\n              line: {\n                stroke: 'black'\n              },\n              text: {\n                stroke: 'none',\n                fill: '#6b6b76',\n                fontWeight: 600\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n            data: data,\n            onValueMouseOver: (datapoint, event) => {\n              console.log(datapoint);\n            },\n            curve: 'curveMonotoneX',\n            color: \"#ADDDE1\",\n            markStyle: {\n              stroke: 'black'\n            },\n            style: {\n              strokeLinejoin: \"round\"\n            },\n            strokeStyle: \"solid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","index","rList","wList","tList","asList","adList","timeList","dateList","map","val","key","ride_name","minutes","Date","ts","getMinutes","time","getHours","date","getMonth","getDate","getFullYear","push","WaitTime","Throughput","AvailableSeats","AvailableDown","compareRide","i","includes","eachStat","list","length","x","y","sort","a","b","selectedRide","count","element","selectedStat","window","addEventListener","line","stroke","text","fill","fontWeight","d","datapoint","event","strokeLinejoin"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    let index = 0;\n    var rList = [];\n    var wList = [];\n    var tList = [];\n    var asList = [];\n    var adList = [];\n    var timeList = [];\n    var dateList = [];\n\n\n    {dataList.map((val, key) => {\t\n        if (val.ride_name){\n            var minutes = new Date(val.ts).getMinutes();\n            if(minutes < 10){\n                minutes = \"0\" + minutes;\n            }\n            var time = new Date(val.ts).getHours() + \":\" + minutes;\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            console.log(\"Ride name = \", val.ride_name);\n            console.log(\"Time = \", time);\n            console.log(\"Date = \", date);\n            rList.push(val.ride_name);\n            timeList.push(time);\n            dateList.push(date)\n            console.log(\"Wait Time = \", val.WaitTime);\n            wList.push(val.WaitTime);\n        \n            console.log(\"Throughput = \", val.Throughput)\n            tList.push(val.Throughput);\n\n\n            console.log(\"Available Seats = \", val.AvailableSeats)\n            asList.push(val.AvailableSeats);\n            console.log(\"Available Down = \", val.AvailableDown)\n            adList.push( val.AvailableDown);\n\n            console.log('');\n     }\n     })}\n\n     const compareRide = () => {\n        for(var i = 0; i < index; i++) {\n            //check box list is compared with collected data\n            if(rideList.includes(rList[i])) {\n                console.log(\"Matched \", rList[i]);\n       \n                //each variable is compared with the selected stat\n                if(statList.includes(\"Wait Time\"))\n                {\n                    //locate variable\n                    if(wList[i] != -1) {\n                        console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n         \n\n                     } \n                }\n                if(statList.includes(\"Throughput\"))\n                {\n                     //locate variable\n                    if(tList[i] != -1) {\n                        console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n   \n                    }\n                }\n                if(statList.includes(\"Available Seats\"))\n                {\n                     //locate variable\n                    if(asList[i] != -1) {\n                        console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n\n                    }\n                }   \n                if(statList.includes(\"Available Down\"))\n                {\n                     //locate variable\n                    if(adList[i] != -1) {\n                        console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n      \n                    }\n                }\n\n                \n                console.log('');\n            }\n        }\n    }\n     \n   var data = []\n    const eachStat = (list) => {\n        for (let i = 0; i < list.length; i++) {\n            if(list[i] != -1){\n            data.push({\n                x: timeList[i],\n                y: list[i]\n            })\n            data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n            }\n        }\n    }\n    const selectedRide = () => {\n        var count = 0\n        for (let i = 0; i < rList.length; i++) {\n             var element = rList[i];\n             if(rideList.includes(element)){\n                console.log(rideList.includes(element));\n                count++;\n             }\n        }\n        console.log(count)\n    }\n\n    const selectedStat = (list) => {\n        if(list == \"Throughput\") {\n            eachStat(tList)\n        }\n        if(list == \"Wait Time\") {\n            eachStat(wList)\n        }\n        if(list == \"Available Seats\") {\n            eachStat(asList)\n        }\n        if(list == \"Available Down\") {\n            eachStat(adList)\n        }\n    }\n\n    \n\n    return (\n\n        <div>\n\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {console.log(\"Amount of rides \", index)}\n            {console.log(\"Ride names = \", rList)}\n            {console.log(\"TimeList = \", timeList)}\n            {console.log(\"DateList = \", dateList)}\n            {console.log(\"WaitList = \", wList)}\n            {console.log(\"ThroughputList = \", tList)}\n            {console.log(\"AvailableSeatList = \", asList)}\n            {console.log(\"AvailableDownList = \", adList)}\n            {selectedRide()}\n            {selectedStat(statList)}\n            {compareRide()}\n\n            <div className=\"App\">\n\n                {rideList.map((val, key) => {\n\n                        {console.log(`This is inside the map the val is: ${val}`)}\n\n                        <FlexibleXYPlot height={500} width={900} xType=\"ordinal\">\n                                        <VerticalGridLines />\n                                        <HorizontalGridLines />\n\n                                                <XAxis title=\"Time of interval card\"\n                                                style={{\n                                                    line: {stroke: 'black'},\n                                                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                                                    \n                                                }}\n                                                tickTotal={data.length} \n                                                tickLabelAngle={-25} \n                                                tickFormat={d => {\n                                                return d\n                                                }}\n                                                />\n                                                <YAxis title={statList}\n                                                style={{\n                                                    line: {stroke: 'black'},\n                                                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                                                }}/>\n\n                                                <LineMarkSeries \n                                                \n                                                    data={data} \n                                                    onValueMouseOver={(datapoint, event)=>{\n                                                        console.log(datapoint)\n                                                    }}\n                                                    \n                                                    curve={'curveMonotoneX'} color=\"#ADDDE1\"\n                                                    markStyle={{stroke: 'black'}}\n                                                    style={{ strokeLinejoin: \"round\"}}\n                                                    strokeStyle=\"solid\"/>\n                                    </FlexibleXYPlot>\n\n\n                })}\n\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
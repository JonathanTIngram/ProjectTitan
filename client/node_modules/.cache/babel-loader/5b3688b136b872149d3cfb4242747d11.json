{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react'; // import Plot from 'react-plotly.js';\n\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n  var state = [];\n  var state2 = [];\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  var throughput;\n  {\n    dataList.map((val, key) => {\n      var time = new Date(val.ts);\n      var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n      intervalCard.push({\n        rideName: val.ride_name,\n        WaitTime: val.WaitTime,\n        Throughput: val.Throughput,\n        AvailableSeats: val.AvailableSeats,\n        AvailableDown: val.AvailableDown,\n        Time: time,\n        Date: date\n      });\n    });\n  }\n  var data = [];\n  var selected = '';\n  var organized = []; //prints intervalCard in order\n\n  const printOrdered = () => {\n    var temp = [];\n    var name = '';\n    intervalCard.forEach(i => {\n      name = i.rideName;\n\n      if (!temp.includes(name)) {\n        temp.push(name);\n      }\n    });\n    {\n      intervalCard.map((val, key) => {\n        var j = 0;\n\n        if (temp[j] == val.rideName) {\n          j++;\n          organized.push(val);\n        } else {\n          organized.unshift(val);\n        }\n      });\n    } //console.log(organized)\n    //console.log(temp)\n  };\n\n  var time = [];\n  var select = [];\n  var throughputData = [];\n  var waitTimeData = [];\n  var availableSeatsData = [];\n  var availableDownData = [];\n  var name = [];\n\n  const graphStat = ride => {\n    organized.map((val, key) => {\n      console.log(val.Throughput);\n      state.push(val.Throughput);\n      state2.push(val.WaitTime);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), printOrdered(), graphStat(rideList), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDiv\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","state","state2","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","throughput","map","val","key","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","ride_name","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","selected","organized","printOrdered","temp","name","forEach","i","includes","j","unshift","select","throughputData","waitTimeData","availableSeatsData","availableDownData","graphStat","ride","window","addEventListener"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { Component, useState, useEffect} from 'react';\r\n// import Plot from 'react-plotly.js';\r\nimport Axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nfunction ChartLine() {\r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n\r\n    var state = [];\r\n    var state2 = [];\r\n\r\n\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n\r\n    var intervalCard = [];\r\n    var throughput;\r\n\r\n    {dataList.map((val, key) => {\t\r\n            var time = new Date(val.ts)\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n        \r\n     })}\r\n  \r\n    var data = []\r\n    var selected = '';\r\n    var organized = []\r\n    //prints intervalCard in order\r\n    const printOrdered = () => {\r\n        var temp = [];\r\n        var name = ''\r\n        intervalCard.forEach(i => {\r\n            name = i.rideName;\r\n            if(!temp.includes(name)){\r\n                temp.push(name)\r\n            }\r\n        });\r\n            {intervalCard.map((val, key) => {\t\r\n            var j = 0\r\n            if(temp[j] == val.rideName){\r\n                j++;\r\n                organized.push(val)\r\n            }\r\n            else{\r\n                organized.unshift(val)\r\n            }\r\n        })}\r\n        //console.log(organized)\r\n        //console.log(temp)\r\n    }\r\n\r\n    var time = [];\r\n    var select = [];\r\n    var throughputData = [];\r\n    var waitTimeData = [];\r\n    var availableSeatsData = [];\r\n    var availableDownData = [];\r\n    var name = []\r\n    const graphStat = (ride) => {\r\n        organized.map((val, key) => {\r\n            console.log(val.Throughput)\r\n            state.push(val.Throughput);\r\n            state2.push(val.WaitTime);\r\n         })\r\n    \r\n    }\r\n    return (\r\n\r\n        <div>\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n        }, [])}\r\n            {printOrdered()}\r\n            {graphStat(rideList)}\r\n            <div id='myDiv'>\r\n            {/* <Plot \r\n            data={[\r\n                {\r\n                    x: [1,3,4],\r\n                    y: state\r\n                },\r\n                {\r\n                    x: [2,4,8],\r\n                    y: state2\r\n                }\r\n            ]}\r\n            layout={{\r\n                width: 800, height: 520,\r\n                xaxis: {\r\n                type: 'time'\r\n                }, \r\n            }}\r\n            /> */}\r\n            </div>\t\t\t\t\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var showRideList = () => {\n    rideList.map((val, key) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            var minutes = new Date(d).getMinutes();\n\n            if (minutes < 10) {\n              minutes = \"0\" + minutes;\n            }\n\n            return new Date(d).getHours() + \":\" + minutes;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: selected,\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), rideList.map(i => {\n          {\n            checkStat(i);\n          }\n          return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n            data: data,\n            onValueMouseOver: (datapoint, event) => {\n              console.log(datapoint);\n            },\n            curve: 'curveMonotoneX',\n            color: \"#ADDDE1\",\n            markStyle: {\n              stroke: 'black'\n            },\n            style: {\n              strokeLinejoin: \"round\"\n            },\n            strokeStyle: \"solid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this);\n        })]\n      }, void 0, true);\n    });\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      if (val.ride_name) {\n        var time = new Date(val.ts);\n        var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n        intervalCard.push({\n          rideName: val.ride_name,\n          WaitTime: val.WaitTime,\n          Throughput: val.Throughput,\n          AvailableSeats: val.AvailableSeats,\n          AvailableDown: val.AvailableDown,\n          Time: time,\n          Date: date\n        });\n      }\n    });\n  } //  const compareRide = () => {\n  //     for(var i = 0; i < index; i++) {\n  //         //check box list is compared with collected data\n  //         if(rideList.includes(rList[i])) {\n  //             console.log(\"Matched \", rList[i]);\n  //             check = true;\n  //             //each variable is compared with the selected stat\n  //             if(statList.includes(\"Wait Time\"))\n  //             {\n  //                 //locate variable\n  //                 if(wList[i] != -1) {\n  //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n  //                  } \n  //             }\n  //             if(statList.includes(\"Throughput\"))\n  //             {\n  //                  //locate variable\n  //                 if(tList[i] != -1) {\n  //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n  //                 }\n  //             }\n  //             if(statList.includes(\"Available Seats\"))\n  //             {\n  //                  //locate variable\n  //                 if(asList[i] != -1) {\n  //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n  //                 }\n  //             }   \n  //             if(statList.includes(\"Available Down\"))\n  //             {\n  //                  //locate variable\n  //                 if(adList[i] != -1) {\n  //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n  //                 }\n  //             }\n  //             console.log('');\n  //         }\n  //     }\n  // }\n\n  var data = [];\n  var selected = '';\n\n  const checkStat = ride => {\n    console.log(intervalCard);\n    {\n      intervalCard.map(val => {\n        if (val.rideName == ride) {\n          if (statList == \"Throughput\") {\n            selected = val.Throughput;\n          }\n\n          if (statList == \"Wait Time\") {\n            selected = val.WaitTime;\n          }\n\n          if (statList == \"Available Seats\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (statList == \"Available Down\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (selected != -1) {\n            data.push({\n              x: val.Time,\n              y: selected\n            });\n          }\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n        height: 500,\n        width: 900,\n        xType: \"time\",\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            var minutes = new Date(d).getMinutes();\n\n            if (minutes < 10) {\n              minutes = \"0\" + minutes;\n            }\n\n            return new Date(d).getHours() + \":\" + minutes;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: selected,\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this), rideList.map(i => {\n          {\n            checkStat(i);\n          }\n          return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n            data: data,\n            onValueMouseOver: (datapoint, event) => {\n              console.log(datapoint);\n            },\n            curve: 'curveMonotoneX',\n            color: \"#ADDDE1\",\n            markStyle: {\n              stroke: 'black'\n            },\n            style: {\n              strokeLinejoin: \"round\"\n            },\n            strokeStyle: \"solid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","showRideList","map","val","key","line","stroke","text","fill","fontWeight","d","minutes","Date","getMinutes","getHours","selected","i","checkStat","datapoint","event","strokeLinejoin","intervalCard","ride_name","time","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","ride","x","y","sort","a","b","window","addEventListener"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAO,gDAAP;AACA,SAAQC,MAAR,EAAgBC,OAAhB,EAAyBC,iBAAzB,EAA4CC,mBAA5C,EAAiEC,KAAjE,EAAwEC,KAAxE,EAA+EC,cAA/E,QAAoG,WAApG;AACA,SACEC,cADF,EAEEC,mBAFF,EAGEC,oBAHF,QAIO,WAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AAGjB,MAAI,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,EAAD,CAAtC;;AAGA,QAAMqB,eAAe,GAAG,MAAM;AAEtBT,IAAAA,KAAK,CAACU,GAAN,CAAW,yCAAX,EAAqDC,IAArD,CAA0DC,GAAG,IAAI;AAC7D;AACAR,MAAAA,WAAW,CAACQ,GAAG,CAACC,IAAL,CAAX;AACH,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAIP,GAND;;AASA,QAAMG,WAAW,GAAG,MAAM;AAEtBlB,IAAAA,KAAK,CAACU,GAAN,CAAW,sCAAX,EAAkDC,IAAlD,CAAuDC,GAAG,IAAI;AAC1D;AACAN,MAAAA,WAAW,CAACM,GAAG,CAACC,IAAL,CAAX;AACH,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAIH,GAND;;AAQA,QAAMI,WAAW,GAAG,MAAM;AAEtBnB,IAAAA,KAAK,CAACU,GAAN,CAAW,wCAAX,EAAoDC,IAApD,CAAyDC,GAAG,IAAI;AAC5D;AACAJ,MAAAA,WAAW,CAACI,GAAG,CAACC,IAAL,CAAX;AACH,KAHD,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAIH,GAND;;AASA,MAAIK,YAAY,GAAG,MAAM;AAGrBjB,IAAAA,QAAQ,CAACkB,GAAT,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AAEvB,0BAEQ;AAAA,gCACwB,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,gBADxB,eAEJ,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,gBAFI,eAIJ,QAAC,KAAD;AAAO,UAAA,KAAK,EAAC,uBAAb;AACA,UAAA,KAAK,EAAE;AACHC,YAAAA,IAAI,EAAE;AAACC,cAAAA,MAAM,EAAE;AAAT,aADH;AAEHC,YAAAA,IAAI,EAAE;AAACD,cAAAA,MAAM,EAAE,MAAT;AAAiBE,cAAAA,IAAI,EAAE,SAAvB;AAAkCC,cAAAA,UAAU,EAAE;AAA9C;AAFH,WADP;AAMA,UAAA,cAAc,EAAE,CAAC,EANjB;AAOA,UAAA,UAAU,EAAEC,CAAC,IAAI;AACjB,gBAAIC,OAAO,GAAG,IAAIC,IAAJ,CAASF,CAAT,EAAYG,UAAZ,EAAd;;AACA,gBAAGF,OAAO,GAAG,EAAb,EAAgB;AACZA,cAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH;;AACA,mBAAO,IAAIC,IAAJ,CAASF,CAAT,EAAYI,QAAZ,KAAwB,GAAxB,GAA8BH,OAArC;AACA;AAbD;AAAA;AAAA;AAAA;AAAA,gBAJI,eAmBJ,QAAC,KAAD;AAAO,UAAA,KAAK,EAAEI,QAAd;AACC,UAAA,KAAK,EAAE;AACJV,YAAAA,IAAI,EAAE;AAACC,cAAAA,MAAM,EAAE;AAAT,aADF;AAEJC,YAAAA,IAAI,EAAE;AAACD,cAAAA,MAAM,EAAE,MAAT;AAAiBE,cAAAA,IAAI,EAAE,SAAvB;AAAkCC,cAAAA,UAAU,EAAE;AAA9C;AAFF;AADR;AAAA;AAAA;AAAA;AAAA,gBAnBI,EAwBPzB,QAAQ,CAACkB,GAAT,CAAcc,CAAD,IAAO;AACjB;AAACC,YAAAA,SAAS,CAACD,CAAD,CAAT;AAAa;AACd,8BACI,QAAC,cAAD;AAEA,YAAA,IAAI,EAAEtB,IAFN;AAGA,YAAA,gBAAgB,EAAE,CAACwB,SAAD,EAAYC,KAAZ,KAAoB;AAClCtB,cAAAA,OAAO,CAACC,GAAR,CAAYoB,SAAZ;AACD,aALH;AAOA,YAAA,KAAK,EAAE,gBAPP;AAOyB,YAAA,KAAK,EAAC,SAP/B;AAQA,YAAA,SAAS,EAAE;AAACZ,cAAAA,MAAM,EAAE;AAAT,aARX;AASA,YAAA,KAAK,EAAE;AAAEc,cAAAA,cAAc,EAAE;AAAlB,aATP;AAUA,YAAA,WAAW,EAAC;AAVZ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAaC,SAfJ,CAxBO;AAAA,sBAFR;AA+CH,KAjDD;AAmDH,GAtDD;;AA0DA,MAAIC,YAAY,GAAG,EAAnB;AACA;AAACjC,IAAAA,QAAQ,CAACc,GAAT,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxB,UAAID,GAAG,CAACmB,SAAR,EAAkB;AACd,YAAIC,IAAI,GAAG,IAAIX,IAAJ,CAAST,GAAG,CAACqB,EAAb,CAAX;AACA,YAAIC,IAAI,GAAG,IAAIb,IAAJ,CAAST,GAAG,CAACqB,EAAb,EAAiBE,QAAjB,KAA8B,GAA9B,GAAoC,IAAId,IAAJ,CAAST,GAAG,CAACqB,EAAb,EAAiBG,OAAjB,EAApC,GAAiE,GAAjE,GAAuE,IAAIf,IAAJ,CAAST,GAAG,CAACqB,EAAb,EAAiBI,WAAjB,EAAlF;AACAP,QAAAA,YAAY,CAACQ,IAAb,CAAkB;AAACC,UAAAA,QAAQ,EAAE3B,GAAG,CAACmB,SAAf;AAA0BS,UAAAA,QAAQ,EAAE5B,GAAG,CAAC4B,QAAxC;AAClBC,UAAAA,UAAU,EAAE7B,GAAG,CAAC6B,UADE;AACUC,UAAAA,cAAc,EAAE9B,GAAG,CAAC8B,cAD9B;AAElBC,UAAAA,aAAa,EAAE/B,GAAG,CAAC+B,aAFD;AAEgBC,UAAAA,IAAI,EAAEZ,IAFtB;AAE4BX,UAAAA,IAAI,EAAEa;AAFlC,SAAlB;AAGN;AACA,KARD;AAQG,GArGa,CAwGjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;;AAEA,MAAI/B,IAAI,GAAG,EAAX;AACA,MAAIqB,QAAQ,GAAG,EAAf;;AACA,QAAME,SAAS,GAAImB,IAAD,IAAU;AACxBvC,IAAAA,OAAO,CAACC,GAAR,CAAYuB,YAAZ;AACA;AAACA,MAAAA,YAAY,CAACnB,GAAb,CAAkBC,GAAD,IAAS;AACvB,YAAGA,GAAG,CAAC2B,QAAJ,IAAgBM,IAAnB,EAAwB;AACxB,cAAGlD,QAAQ,IAAI,YAAf,EAA6B;AACzB6B,YAAAA,QAAQ,GAAGZ,GAAG,CAAC6B,UAAf;AACH;;AACD,cAAG9C,QAAQ,IAAI,WAAf,EAA4B;AACxB6B,YAAAA,QAAQ,GAAGZ,GAAG,CAAC4B,QAAf;AACH;;AACD,cAAG7C,QAAQ,IAAI,iBAAf,EAAiC;AAC7B6B,YAAAA,QAAQ,GAAGZ,GAAG,CAAC8B,cAAf;AACH;;AACD,cAAG/C,QAAQ,IAAI,gBAAf,EAAiC;AAC7B6B,YAAAA,QAAQ,GAAGZ,GAAG,CAAC8B,cAAf;AACH;;AACD,cAAGlB,QAAQ,IAAI,CAAC,CAAhB,EACA;AACIrB,YAAAA,IAAI,CAACmC,IAAL,CAAU;AACNQ,cAAAA,CAAC,EAAElC,GAAG,CAACgC,IADD;AAENG,cAAAA,CAAC,EAAEvB;AAFG,aAAV;AAIH;AACJ;AACA,OAtBA;AAsBE;AACHrB,IAAAA,IAAI,CAAC6C,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACH,CAAF,GAAMI,CAAC,CAACJ,CAAT,GAAc,CAAd,GAAmBG,CAAC,CAACH,CAAF,KAAQI,CAAC,CAACJ,CAAX,GAAgB,CAAhB,GAAoB,CAAC,CAA3D;AACH,GA1BD;;AA4BA,sBAEI;AAAA,eACKnE,SAAS,CAAC,MAAM;AACjB;AAACwE,QAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC3C,WAAW,EAA3C;AAA+C;AAChD;AAAC0C,QAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgCrD,eAAe,EAA/C;AAAmD;AACpD;AAACoD,QAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC5C,WAAW,EAA3C;AAA+C;AACnD,KAJa,EAIX,EAJW,CADd,eAQI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACC,QAAC,cAAD;AAAgB,QAAA,MAAM,EAAE,GAAxB;AAA6B,QAAA,KAAK,EAAE,GAApC;AAAyC,QAAA,KAAK,EAAC,MAA/C;AAAA,gCAGG,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,gBAHH,eAIG,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,gBAJH,eAMG,QAAC,KAAD;AAAO,UAAA,KAAK,EAAC,uBAAb;AACA,UAAA,KAAK,EAAE;AACHM,YAAAA,IAAI,EAAE;AAACC,cAAAA,MAAM,EAAE;AAAT,aADH;AAEHC,YAAAA,IAAI,EAAE;AAACD,cAAAA,MAAM,EAAE,MAAT;AAAiBE,cAAAA,IAAI,EAAE,SAAvB;AAAkCC,cAAAA,UAAU,EAAE;AAA9C;AAFH,WADP;AAMA,UAAA,cAAc,EAAE,CAAC,EANjB;AAOA,UAAA,UAAU,EAAEC,CAAC,IAAI;AACjB,gBAAIC,OAAO,GAAG,IAAIC,IAAJ,CAASF,CAAT,EAAYG,UAAZ,EAAd;;AACA,gBAAGF,OAAO,GAAG,EAAb,EAAgB;AACZA,cAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH;;AACA,mBAAO,IAAIC,IAAJ,CAASF,CAAT,EAAYI,QAAZ,KAAwB,GAAxB,GAA8BH,OAArC;AACA;AAbD;AAAA;AAAA;AAAA;AAAA,gBANH,eAqBG,QAAC,KAAD;AAAO,UAAA,KAAK,EAAEI,QAAd;AACC,UAAA,KAAK,EAAE;AACJV,YAAAA,IAAI,EAAE;AAACC,cAAAA,MAAM,EAAE;AAAT,aADF;AAEJC,YAAAA,IAAI,EAAE;AAACD,cAAAA,MAAM,EAAE,MAAT;AAAiBE,cAAAA,IAAI,EAAE,SAAvB;AAAkCC,cAAAA,UAAU,EAAE;AAA9C;AAFF;AADR;AAAA;AAAA;AAAA;AAAA,gBArBH,EA0BAzB,QAAQ,CAACkB,GAAT,CAAcc,CAAD,IAAO;AACjB;AAACC,YAAAA,SAAS,CAACD,CAAD,CAAT;AAAa;AACd,8BACI,QAAC,cAAD;AAEA,YAAA,IAAI,EAAEtB,IAFN;AAGA,YAAA,gBAAgB,EAAE,CAACwB,SAAD,EAAYC,KAAZ,KAAoB;AAClCtB,cAAAA,OAAO,CAACC,GAAR,CAAYoB,SAAZ;AACD,aALH;AAOA,YAAA,KAAK,EAAE,gBAPP;AAOyB,YAAA,KAAK,EAAC,SAP/B;AAQA,YAAA,SAAS,EAAE;AAACZ,cAAAA,MAAM,EAAE;AAAT,aARX;AASA,YAAA,KAAK,EAAE;AAAEc,cAAAA,cAAc,EAAE;AAAlB,aATP;AAUA,YAAA,WAAW,EAAC;AAVZ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAaC,SAfJ,CA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AA0DH;;GA/OQrC,S;;KAAAA,S;AAiPT,eAAeA,SAAf","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n    var showRideList = () => {\n\n\n        rideList.map((val, key) => {\n\n            return (\n\n                    <>\n                                            <VerticalGridLines />\n                <HorizontalGridLines />\n\n                <XAxis title=\"Time of interval card\"\n                style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                    \n                  }}\n                tickLabelAngle={-25} \n                tickFormat={d => {\n                var minutes = new Date(d).getMinutes();\n                if(minutes < 10){\n                    minutes = \"0\" + minutes;\n                }\n                 return new Date(d).getHours()+ \":\" + minutes\n                }}\n                />\n                <YAxis title={selected}\n                 style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                  }}/>\n            {rideList.map((i) => {\n                {checkStat(i)}\n                return (\n                    <LineMarkSeries \n                 \n                    data={data} \n                    onValueMouseOver={(datapoint, event)=>{\n                        console.log(datapoint)\n                      }}\n                      \n                    curve={'curveMonotoneX'} color=\"#ADDDE1\"\n                    markStyle={{stroke: 'black'}}\n                    style={{ strokeLinejoin: \"round\"}}\n                    strokeStyle=\"solid\"/>\n                )\n                })}\n                    \n                    </>\n                \n                \n            );\n        });\n        \n    }\n\n\n\n    var intervalCard = [];\n    {dataList.map((val, key) => {\t\n        if (val.ride_name){\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n     }\n     })}\n    \n    \n    //  const compareRide = () => {\n    //     for(var i = 0; i < index; i++) {\n    //         //check box list is compared with collected data\n    //         if(rideList.includes(rList[i])) {\n    //             console.log(\"Matched \", rList[i]);\n    //             check = true;\n    //             //each variable is compared with the selected stat\n    //             if(statList.includes(\"Wait Time\"))\n    //             {\n    //                 //locate variable\n    //                 if(wList[i] != -1) {\n    //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n         \n\n    //                  } \n    //             }\n    //             if(statList.includes(\"Throughput\"))\n    //             {\n    //                  //locate variable\n    //                 if(tList[i] != -1) {\n    //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n   \n    //                 }\n    //             }\n    //             if(statList.includes(\"Available Seats\"))\n    //             {\n    //                  //locate variable\n    //                 if(asList[i] != -1) {\n    //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n\n    //                 }\n    //             }   \n    //             if(statList.includes(\"Available Down\"))\n    //             {\n    //                  //locate variable\n    //                 if(adList[i] != -1) {\n    //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n      \n    //                 }\n    //             }\n\n                \n    //             console.log('');\n    //         }\n    //     }\n    // }\n     \n    var data = []\n    var selected = '';\n    const checkStat = (ride) => {\t\n        console.log(intervalCard)\n        {intervalCard.map((val) => {\n            if(val.rideName == ride){\n            if(statList == \"Throughput\") {\n                selected = val.Throughput\n            }\n            if(statList == \"Wait Time\") {\n                selected = val.WaitTime\n            }\n            if(statList == \"Available Seats\"){\n                selected = val.AvailableSeats\n            }\n            if(statList == \"Available Down\") {\n                selected = val.AvailableSeats\n            }\n            if(selected != -1) \n            {\n                data.push({\n                    x: val.Time,\n                    y: selected\n                })\n            }\n        }\n        })}\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n    }\n\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n\n\n            <div className=\"App\">\n             <FlexibleXYPlot height={500} width={900} xType=\"time\">\n\n\n                <VerticalGridLines />\n                <HorizontalGridLines />\n\n                <XAxis title=\"Time of interval card\"\n                style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                    \n                  }}\n                tickLabelAngle={-25} \n                tickFormat={d => {\n                var minutes = new Date(d).getMinutes();\n                if(minutes < 10){\n                    minutes = \"0\" + minutes;\n                }\n                 return new Date(d).getHours()+ \":\" + minutes\n                }}\n                />\n                <YAxis title={selected}\n                 style={{\n                    line: {stroke: 'black'},\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                  }}/>\n            {rideList.map((i) => {\n                {checkStat(i)}\n                return (\n                    <LineMarkSeries \n                 \n                    data={data} \n                    onValueMouseOver={(datapoint, event)=>{\n                        console.log(datapoint)\n                      }}\n                      \n                    curve={'curveMonotoneX'} color=\"#ADDDE1\"\n                    markStyle={{stroke: 'black'}}\n                    style={{ strokeLinejoin: \"round\"}}\n                    strokeStyle=\"solid\"/>\n                )\n                })}\n            </FlexibleXYPlot>\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst cors = require('cors');\n\nconst app = express();\n\nconst path = require('path');\n\nconst mysql = require('mysql');\n\nconst fs = require('fs');\n\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'titan',\n  password: 'titanTeam123$',\n  database: 'park_data'\n});\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.post('/addAttraction', (req, res) => {\n  console.log(req.body);\n  const ride_name = req.body.ride_name;\n  const dailyOpening = req.body.dailyOpening;\n  const dailyClosing = req.body.dailyClosing;\n  const theoryCapacity = req.body.theoryCapacity;\n  const targetCapacity = req.body.targetCapacity;\n  const minVehicles = req.body.minVehicles;\n  const maxVehicles = req.body.maxVehicles;\n  const maxSeats = req.body.maxSeats;\n  const minStaff = req.body.minStaff;\n  const maxStaff = req.body.maxStaff;\n  const parkSection = req.body.parkSection;\n  const weatherCode = req.body.weatherCode;\n  const rideType = req.body.rideType;\n  const maxWind = req.body.maxWind;\n  const minTemp = req.body.minTemp;\n  const powerRedundancy = req.body.powerRedundancy;\n  const numGates = req.body.numGates;\n  const ridePrimary = req.body.ridePrimary;\n  const rideSecondary = req.body.rideSecondary;\n  const rideTertiary = req.body.rideTertiary; //for main attraction information\n\n  const sqlInsert = \"INSERT INTO attraction (ride_name, dailyOpening, dailyClosing, theoryCapacity, targetCapacity, minVehicles, maxVehicles, maxSeats, minStaff, maxStaff, parkSection, weatherCode, rideType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\";\n  connection.query(sqlInsert, [ride_name, dailyOpening, dailyClosing, theoryCapacity, targetCapacity, minVehicles, maxVehicles, maxSeats, minStaff, maxStaff, parkSection, weatherCode, rideType], (err, result) => {\n    console.log(result);\n  }); //for safety critical information\n\n  const safetyInsert = \"INSERT INTO safetyCriticalInfo (ride_name, weatherCode, maxWind, minTemp, powerRedundancy, numGates) VALUES (?, ?, ?, ?, ?, ?)\";\n  connection.query(safetyInsert, [ride_name, weatherCode, maxWind, minTemp, powerRedundancy, numGates], (err, result) => {\n    console.log(result);\n  }); //for phone information\n\n  const phoneInsert = \"INSERT INTO phoneInfo (ride_name, ridePrimary, rideSecondary, rideTertiary) VALUES (?, ?, ?, ?)\";\n  connection.query(phoneInsert, [ride_name, ridePrimary, rideSecondary, rideTertiary], (err, result) => {\n    console.log(result);\n  });\n});\napp.get('/getAttraction', (req, res) => {\n  connection.query(\"SELECT * FROM attraction\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n});\napp.get('/getSafetyInfo', (req, res) => {\n  connection.query(\"SELECT * FROM safetyCriticalInfo\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n});\napp.get('/getPhoneInfo', (req, res) => {\n  connection.query(\"SELECT * FROM phoneInfo\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n});\napp.get('/getAttractionNames', (req, res) => {\n  connection.query(\"SELECT ride_name FROM attraction\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //PUT REQUESTS\n\napp.put(\"/editAttraction\", (req, res) => {\n  console.log(req.body);\n  const ride_name = req.body.ride_name;\n  const dailyOpening = req.body.dailyOpening;\n  const dailyClosing = req.body.dailyClosing;\n  const theoryCapacity = req.body.theoryCapacity;\n  const targetCapacity = req.body.targetCapacity;\n  const minVehicles = req.body.minVehicles;\n  const maxVehicles = req.body.maxVehicles;\n  const maxSeats = req.body.maxSeats;\n  const minStaff = req.body.minStaff;\n  const maxStaff = req.body.maxStaff;\n  const parkSection = req.body.parkSection;\n  const weatherCode = req.body.weatherCode;\n  const rideType = req.body.rideType;\n  const maxWind = req.body.maxWind;\n  const minTemp = req.body.minTemp;\n  const powerRedundancy = req.body.powerRedundancy;\n  const numGates = req.body.numGates;\n  const ridePrimary = req.body.ridePrimary;\n  const rideSecondary = req.body.rideSecondary;\n  const rideTertiary = req.body.rideTertiary; //for main attraction information\n\n  const sqlInsert = \"UPDATE attraction SET dailyOpening = ?, dailyClosing = ?, theoryCapacity = ?, targetCapacity = ?, minVehicles = ?, maxVehicles = ?, maxSeats = ?, maxStaff = ?, minStaff = ?, parkSection = ?, weatherCode = ?, rideType = ? WHERE ride_name = ?;\";\n  connection.query(sqlInsert, [dailyOpening, dailyClosing, theoryCapacity, targetCapacity, minVehicles, maxVehicles, maxSeats, minStaff, maxStaff, parkSection, weatherCode, rideType, ride_name], (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n      console.log(result);\n    }\n  }); //for safety critical information\n\n  const safetyInsert = \"UPDATE safetyCriticalInfo SET weatherCode = ?, maxWind = ?, minTemp = ?, powerRedundancy = ?, numGates = ? WHERE ride_name = ?\";\n  connection.query(safetyInsert, [weatherCode, maxWind, minTemp, powerRedundancy, numGates, ride_name], (err, result) => {\n    console.log(result);\n  }); //for phone information\n\n  const phoneInsert = \"UPDATE phoneInfo SET ridePrimary = ?, rideSecondary = ?, rideTertiary = ? WHERE ride_name = ?\";\n  connection.query(phoneInsert, [ridePrimary, rideSecondary, rideTertiary, ride_name], (err, result) => {\n    console.log(result);\n  });\n});\napp.delete('/deleteAttraction/:ride_name', (req, res) => {\n  const ride_name = req.params.ride_name;\n  sqlInsert = \"DELETE FROM ATTRACTION WHERE ride_name = ?\";\n  connection.query(sqlInsert, ride_name, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); // app.get('/getRide', (req, res) =>{\n//     connection.query(\"SELECT * FROM \")\n// })\n//insert a get request to delete database entires here\n// const sqlInsert = \"INSERT INTO attraction (ride_name, dailyOpening, dailyClosing, theoryCapacity, targetCapcity, minVehicles, maxVehicles, maxStaff, parkSection, weatherCode, attrType) VALUES ('joker', 'time', 'time', 4, 4, 4, 4, 4, 4, 'sunny', 'ride');\"\n// connection.query(sqlInsert, (err, result) => {\n//     res.send('hello titan');\n// })\n\napp.post('/addInterval', (req, res) => {\n  console.log(req.body);\n  const ride_name = req.body.ride_name;\n  const timeValue = req.body.timeValue;\n  const startingTime = req.body.startingTime;\n  const endingTime = req.body.endingTime;\n  console.log(\"\\n\\nBackend\");\n  var checkedWaitTime;\n  var checkedThroughput;\n  var checkedAvailableSeats;\n  var checkedAvailableDown;\n  const checkBoxData = req.body.typeState.map((d, i) => {\n    if (d.id == 1 && d.type == \"Wait Time\") {\n      checkedWaitTime = d.isChecked;\n    } else if (d.id == 2 && d.type == \"Throughput\") {\n      checkedThroughput = d.isChecked;\n    } else if (d.id == 3 && d.type == \"Available Seats\") {\n      checkedAvailableSeats = d.isChecked;\n    } else if (d.id == 4 && d.type == \"Available Down\") {\n      checkedAvailableDown = d.isChecked;\n    }\n\n    console.log(d);\n\n    if (d.isChecked == true) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  console.log(checkedWaitTime);\n  console.log(checkedThroughput);\n  console.log(checkedAvailableSeats);\n  console.log(checkedAvailableDown);\n  console.log(ride_name);\n  const sqlInsert = \"INSERT INTO intervals (ride_name, timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown) VALUES (?, ?, ?, ?, ?, ?, ?, ?);\";\n  connection.query(sqlInsert, [ride_name, timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown], (err, result) => {\n    console.log(result);\n  });\n});\napp.get('/getInterval/:rideSelect', (req, res) => {\n  var rideSelect = req.params.rideSelect;\n  rideSelect = rideSelect.replace(':', ''); //get ride of the colon in front of rideSelect\n\n  console.log(rideSelect);\n  sqlInsert = \"SELECT * FROM intervals WHERE ride_name = ?\";\n  connection.query(sqlInsert, rideSelect, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(rideSelect);\n      res.send(result);\n    }\n  });\n});\napp.post('/addParkInterval', (req, res) => {\n  console.log(req.body);\n  const timeValue = req.body.timeValue;\n  const startingTime = req.body.startingTime;\n  const endingTime = req.body.endingTime;\n  console.log(\"\\n\\nBackend\");\n  var checkedWaitTime;\n  var checkedThroughput;\n  var checkedAvailableSeats;\n  var checkedAvailableDown;\n  const checkBoxData = req.body.typeState.map((d, i) => {\n    if (d.id == 1 && d.type == \"Wait Time\") {\n      checkedWaitTime = d.isChecked;\n    } else if (d.id == 2 && d.type == \"Throughput\") {\n      checkedThroughput = d.isChecked;\n    } else if (d.id == 3 && d.type == \"Available Seats\") {\n      checkedAvailableSeats = d.isChecked;\n    } else if (d.id == 4 && d.type == \"Available Down\") {\n      checkedAvailableDown = d.isChecked;\n    }\n\n    console.log(d);\n\n    if (d.isChecked == true) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  console.log(checkedWaitTime);\n  console.log(checkedThroughput);\n  console.log(checkedAvailableSeats);\n  console.log(checkedAvailableDown);\n  const sqlInsert = \"INSERT INTO parkIntervals (timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown) VALUES (?, ?, ?, ?, ?, ?, ?);\";\n  connection.query(sqlInsert, [timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown], (err, result) => {\n    console.log(result);\n  });\n});\napp.get('/getParkInterval', (req, res) => {\n  connection.query(\"SELECT * FROM parkIntervals\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n});\napp.listen(3001, () => {\n  console.log('Running on port 3001');\n});","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/index.js"],"names":["express","require","bodyParser","cors","app","path","mysql","fs","connection","createConnection","host","user","password","database","use","json","urlencoded","extended","post","req","res","console","log","body","ride_name","dailyOpening","dailyClosing","theoryCapacity","targetCapacity","minVehicles","maxVehicles","maxSeats","minStaff","maxStaff","parkSection","weatherCode","rideType","maxWind","minTemp","powerRedundancy","numGates","ridePrimary","rideSecondary","rideTertiary","sqlInsert","query","err","result","safetyInsert","phoneInsert","get","send","put","delete","params","timeValue","startingTime","endingTime","checkedWaitTime","checkedThroughput","checkedAvailableSeats","checkedAvailableDown","checkBoxData","typeState","map","d","i","id","type","isChecked","rideSelect","replace","listen"],"mappings":"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","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst app = express();\nconst path = require('path');\nconst mysql = require('mysql');\nconst fs = require('fs');\n\nvar connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'titan',\n    password: 'titanTeam123$',\n    database: 'park_data'\n});\n\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.urlencoded({extended: true}));\n\napp.post('/addAttraction', (req, res) =>{\n    console.log(req.body);\n    const ride_name = req.body.ride_name;\n    const dailyOpening = req.body.dailyOpening;\n    const dailyClosing = req.body.dailyClosing;\n    const theoryCapacity = req.body.theoryCapacity;\n    const targetCapacity = req.body.targetCapacity;\n    const minVehicles = req.body.minVehicles;\n    const maxVehicles = req.body.maxVehicles;\n    const maxSeats = req.body.maxSeats;\n    const minStaff = req.body.minStaff;\n    const maxStaff = req.body.maxStaff;\n    const parkSection = req.body.parkSection;\n    const weatherCode = req.body.weatherCode;\n    const rideType = req.body.rideType;\n\n    const maxWind = req.body.maxWind;\n    const minTemp = req.body.minTemp;\n    const powerRedundancy = req.body.powerRedundancy;\n    const numGates = req.body.numGates;\n\n    const ridePrimary = req.body.ridePrimary;\n    const rideSecondary = req.body.rideSecondary;\n    const rideTertiary = req.body.rideTertiary;\n\n    //for main attraction information\n    const sqlInsert = \"INSERT INTO attraction (ride_name, dailyOpening, dailyClosing, theoryCapacity, targetCapacity, minVehicles, maxVehicles, maxSeats, minStaff, maxStaff, parkSection, weatherCode, rideType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\"\n    connection.query(sqlInsert, [ride_name, dailyOpening, dailyClosing, theoryCapacity,\n                         targetCapacity, minVehicles, maxVehicles,\n                         maxSeats, minStaff, maxStaff, parkSection, weatherCode, rideType], \n                         (err, result) =>{\n                            console.log(result);\n                        }\n        );\n    \n    //for safety critical information\n    const safetyInsert = \"INSERT INTO safetyCriticalInfo (ride_name, weatherCode, maxWind, minTemp, powerRedundancy, numGates) VALUES (?, ?, ?, ?, ?, ?)\";\n    connection.query(safetyInsert, [ride_name, weatherCode, maxWind, minTemp, powerRedundancy, numGates],\n        (err, result) =>{\n            console.log(result);\n        })\n\n    //for phone information\n    const phoneInsert = \"INSERT INTO phoneInfo (ride_name, ridePrimary, rideSecondary, rideTertiary) VALUES (?, ?, ?, ?)\";\n    connection.query(phoneInsert, [ride_name, ridePrimary, rideSecondary, rideTertiary],\n        (err, result) =>{\n            console.log(result);\n        })\n});\n\n\napp.get('/getAttraction', (req, res) =>{\n    connection.query(\"SELECT * FROM attraction\", (err, result) => {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            res.send(result);\n        }\n    });\n});\n\napp.get('/getSafetyInfo', (req, res) =>{\n    connection.query(\"SELECT * FROM safetyCriticalInfo\", (err, result) => {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            res.send(result);\n        }\n    });\n});\n\napp.get('/getPhoneInfo', (req, res) =>{\n    connection.query(\"SELECT * FROM phoneInfo\", (err, result) => {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            res.send(result);\n        }\n    });\n});\n\napp.get('/getAttractionNames', (req, res) =>{\n    connection.query(\"SELECT ride_name FROM attraction\", (err, result) => {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            res.send(result);\n        }\n    });\n});\n\n\n\n\n\n//PUT REQUESTS\napp.put(\"/editAttraction\", (req, res) => {\n    console.log(req.body);\n    const ride_name = req.body.ride_name;\n    const dailyOpening = req.body.dailyOpening;\n    const dailyClosing = req.body.dailyClosing;\n    const theoryCapacity = req.body.theoryCapacity;\n    const targetCapacity = req.body.targetCapacity;\n    const minVehicles = req.body.minVehicles;\n    const maxVehicles = req.body.maxVehicles;\n    const maxSeats = req.body.maxSeats;\n    const minStaff = req.body.minStaff;\n    const maxStaff = req.body.maxStaff;\n    const parkSection = req.body.parkSection;\n    const weatherCode = req.body.weatherCode;\n    const rideType = req.body.rideType;\n\n    const maxWind = req.body.maxWind;\n    const minTemp = req.body.minTemp;\n    const powerRedundancy = req.body.powerRedundancy;\n    const numGates = req.body.numGates;\n\n    const ridePrimary = req.body.ridePrimary;\n    const rideSecondary = req.body.rideSecondary;\n    const rideTertiary = req.body.rideTertiary;\n\n\n    //for main attraction information\n    const sqlInsert = \"UPDATE attraction SET dailyOpening = ?, dailyClosing = ?, theoryCapacity = ?, targetCapacity = ?, minVehicles = ?, maxVehicles = ?, maxSeats = ?, maxStaff = ?, minStaff = ?, parkSection = ?, weatherCode = ?, rideType = ? WHERE ride_name = ?;\";\n    connection.query(\n      sqlInsert,\n      [dailyOpening, dailyClosing, theoryCapacity, targetCapacity,\n         minVehicles, maxVehicles, maxSeats,\n        minStaff, maxStaff, parkSection, weatherCode, rideType,\n        ride_name],\n      (err, result) => {\n        if (err) {\n          console.log(err);\n        } else {\n          res.send(result);\n          console.log(result);\n        }\n      }\n    );\n\n    //for safety critical information\n    const safetyInsert = \"UPDATE safetyCriticalInfo SET weatherCode = ?, maxWind = ?, minTemp = ?, powerRedundancy = ?, numGates = ? WHERE ride_name = ?\";\n    connection.query(safetyInsert, [weatherCode, maxWind, minTemp, powerRedundancy, numGates, ride_name],\n        (err, result) =>{\n            console.log(result);\n        })\n\n    //for phone information\n    const phoneInsert = \"UPDATE phoneInfo SET ridePrimary = ?, rideSecondary = ?, rideTertiary = ? WHERE ride_name = ?\";\n    connection.query(phoneInsert, [ridePrimary, rideSecondary, rideTertiary, ride_name],\n        (err, result) => {\n            console.log(result);\n        })\n  });\n\n\n\napp.delete('/deleteAttraction/:ride_name', (req, res) => {\n    const ride_name = req.params.ride_name\n\n    sqlInsert = \"DELETE FROM ATTRACTION WHERE ride_name = ?\"\n    connection.query(sqlInsert, ride_name, (err, result) =>{\n        if (err){\n            console.log(err);\n        }\n        else {\n            res.send(result);\n        }\n    })\n});\n \n// app.get('/getRide', (req, res) =>{\n//     connection.query(\"SELECT * FROM \")\n// })\n\n//insert a get request to delete database entires here\n\n// const sqlInsert = \"INSERT INTO attraction (ride_name, dailyOpening, dailyClosing, theoryCapacity, targetCapcity, minVehicles, maxVehicles, maxStaff, parkSection, weatherCode, attrType) VALUES ('joker', 'time', 'time', 4, 4, 4, 4, 4, 4, 'sunny', 'ride');\"\n// connection.query(sqlInsert, (err, result) => {\n//     res.send('hello titan');\n// })\n\napp.post('/addInterval', (req, res) =>{\n    console.log(req.body);\n\n    const ride_name = req.body.ride_name;\n    const timeValue = req.body.timeValue;\n    const startingTime = req.body.startingTime;\n    const endingTime = req.body.endingTime;\n\n\n    \n\n\n    console.log(\"\\n\\nBackend\")\n\n    var checkedWaitTime;\n    var checkedThroughput;\n    var checkedAvailableSeats;\n    var checkedAvailableDown;\n\n    const checkBoxData = req.body.typeState.map((d, i)=>  {\n\n        if(d.id == 1 && d.type == \"Wait Time\"){\n            checkedWaitTime = d.isChecked;\n        }\n\n        else if(d.id == 2 && d.type == \"Throughput\"){\n            checkedThroughput = d.isChecked;\n        }\n\n        else if(d.id == 3 && d.type == \"Available Seats\"){\n            checkedAvailableSeats = d.isChecked;\n        }\n\n        else if(d.id == 4 && d.type == \"Available Down\"){\n            checkedAvailableDown = d.isChecked;\n        }\n\n\n        console.log(d)\n        if (d.isChecked == true) {\n          return true;\n        }\n        else {\n          return false;\n        }\n        })\n        \n    console.log(checkedWaitTime);\n    console.log(checkedThroughput);\n    console.log(checkedAvailableSeats);\n    console.log(checkedAvailableDown);\n    console.log(ride_name);\n\n\n\n    const sqlInsert = \"INSERT INTO intervals (ride_name, timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown) VALUES (?, ?, ?, ?, ?, ?, ?, ?);\"\n    connection.query(sqlInsert, [ride_name, timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown], \n                         (err, result) => {\n                            console.log(result)\n                        });\n});\n\napp.get('/getInterval/:rideSelect', (req, res) =>{\n\n    var rideSelect = req.params.rideSelect\n\n\n    rideSelect = rideSelect.replace(':', ''); //get ride of the colon in front of rideSelect\n\n    console.log(rideSelect);\n\n\n    sqlInsert = \"SELECT * FROM intervals WHERE ride_name = ?\"\n    connection.query(sqlInsert, rideSelect, (err, result) => {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            console.log(rideSelect);\n            res.send(result);\n        }\n    });\n});\n\n\n\napp.post('/addParkInterval', (req, res) =>{\n    console.log(req.body);\n\n    const timeValue = req.body.timeValue;\n    const startingTime = req.body.startingTime;\n    const endingTime = req.body.endingTime;\n\n    console.log(\"\\n\\nBackend\")\n\n    var checkedWaitTime;\n    var checkedThroughput;\n    var checkedAvailableSeats;\n    var checkedAvailableDown;\n\n    const checkBoxData = req.body.typeState.map((d, i)=>  {\n\n        if(d.id == 1 && d.type == \"Wait Time\"){\n            checkedWaitTime = d.isChecked;\n        }\n\n        else if(d.id == 2 && d.type == \"Throughput\"){\n            checkedThroughput = d.isChecked;\n        }\n\n        else if(d.id == 3 && d.type == \"Available Seats\"){\n            checkedAvailableSeats = d.isChecked;\n        }\n\n        else if(d.id == 4 && d.type == \"Available Down\"){\n            checkedAvailableDown = d.isChecked;\n        }\n\n\n        console.log(d)\n        if (d.isChecked == true) {\n          return true;\n        }\n        else {\n          return false;\n        }\n        })\n        \n    console.log(checkedWaitTime);\n    console.log(checkedThroughput);\n    console.log(checkedAvailableSeats);\n    console.log(checkedAvailableDown);\n\n    const sqlInsert = \"INSERT INTO parkIntervals (timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown) VALUES (?, ?, ?, ?, ?, ?, ?);\"\n    connection.query(sqlInsert, [timeValue, startingTime, endingTime, checkedWaitTime, checkedThroughput, checkedAvailableSeats, checkedAvailableDown], \n                         (err, result) => {\n                            console.log(result)\n                        });\n});\n\napp.get('/getParkInterval', (req, res) =>{\n    connection.query(\"SELECT * FROM parkIntervals\", (err, result) => {\n        if (err) {\n            console.log(err);\n        }\n        else {\n            res.send(result);\n        }\n    });\n});\napp.listen(3001, () =>{\n    console.log('Running on port 3001');\n})"]},"metadata":{},"sourceType":"module"}
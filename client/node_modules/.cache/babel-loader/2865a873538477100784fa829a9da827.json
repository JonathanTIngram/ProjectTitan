{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Interval/AttractionModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport styled from 'styled-components';\nimport { MdClose } from 'react-icons/md';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Background = styled.div`\n  width: 0px;\n  height: 0px;\n  position: fixed;\n  display: flex;\n  align-items: center;\n  z-index: 10;\n`;\n_c = Background;\nconst ModalWrapper = styled.div`\n  top: 200px;\n  width: 485px;\n  height: 100%;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: grey;\n  position: relative;\n  border-radius: 10px;\n`;\n_c2 = ModalWrapper;\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: left;\n  align-items: left;\n  line-height: 1.8;\n  p {\n    margin-bottom: 1rem;\n  }\n  form {\n    text-align: left;\n    color: lightblue;\n  }\n  header {\n    \n    font-size: 20pt;\n    text-align: left;\n  }\n`;\n_c3 = ModalContent;\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 0px;\n  right: 20px;\n  width: 20px;\n  height: 40px;\n  padding: 0;\n  z-index: 10;\n`;\n_c4 = CloseModalButton;\nconst InputStyle = styled.input`\nmargin-bottom: 20px;\nwidth: 40%;\n`;\n_c5 = InputStyle;\nconst Submit = styled.button`\nmargin-top: 20px;\nwidth: 50%;\nposition: relative;\nleft: 20%;\n`;\n_c6 = Submit;\nconst TR = styled.div`\npadding-right: 10px;\nfont-size: 17px;\n`;\n_c7 = TR;\nconst Menu = styled.div`\n  display: flex;\n  width: 100%;\n  overflow-x: auto;\n`;\n_c8 = Menu;\nconst Border = styled.div`\nborder: px solid red;\nbackground: red;\nz-index: 10;\n`;\n_c9 = Border;\nexport const AttractionModal = ({\n  showModal,\n  setShowModal,\n  ride\n}) => {\n  _s();\n\n  const modalRef = useRef();\n  const animation = useSpring({\n    config: {\n      duration: 250\n    },\n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(100%)`\n  });\n\n  const closeModal = e => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n    }\n  };\n\n  const keyPress = useCallback(e => {\n    if (e.key === 'Escape' && showModal) {\n      setShowModal(false);\n      console.log('I pressed');\n    }\n  }, [setShowModal, showModal]);\n  useEffect(() => {\n    document.addEventListener('keydown', keyPress);\n    return () => document.removeEventListener('keydown', keyPress);\n  }, [keyPress]); //states\n\n  const [ride_name, setRideName] = useState('');\n  const [startingTime, setStartingTime] = useState('');\n  const [endingTime, setEndingTime] = useState('');\n  const [timeValue, setTime] = useState('');\n  const [typeState, setTypeState] = useState([]);\n  const [unitState, setUnitState] = useState(\"\");\n  const [intervalList, setIntervalList] = useState([]);\n  useEffect(() => {\n    let typeState = [{\n      id: 1,\n      type: \"Wait Time\"\n    }, {\n      id: 2,\n      type: \"Throughput\"\n    }, {\n      id: 3,\n      type: \"Available Seats\"\n    }, {\n      id: 4,\n      type: \"Available Down\"\n    }];\n    setTypeState(typeState.map(d => {\n      return {\n        select: false,\n        id: d.id,\n        type: d.type\n      };\n    }));\n  }, []); //state to get all attractions\n  //send the attraction data to the backend running on port 3001\n  //specifically /addAttraction\n\n  const submitInterval = () => {\n    Axios.post('http://localhost:3001/addInterval', {\n      ride_name: ride,\n      timeValue: timeValue,\n      typeState: typeState.map((d, i) => {\n        if (d.select === true) {\n          const checkData = {\n            isChecked: true,\n            id: d.id,\n            type: d.type\n          }; //[d.id, d.type, d.select]                    \n\n          return checkData;\n        } else {\n          const checkData = {\n            isChecked: false,\n            id: d.id,\n            type: d.type\n          }; //[d.id, d.type, d.select]                    \n\n          return checkData;\n        }\n      }),\n      startingTime: startingTime,\n      endingTime: endingTime\n    }).then(() => {\n      alert('successful insert');\n    }).then(() => {\n      console.log(\"Successfully sent to port 3001\");\n    });\n  };\n\n  var emptyBoxArray = [];\n\n  const changeInputColor = emptyBoxArray => {\n    for (let index = 0; index < emptyBoxArray.length; index++) {\n      var element = emptyBoxArray[index];\n      console.log(document.getElementById(element));\n      document.getElementById(element).style.backgroundColor = \"pink\";\n    }\n  };\n\n  var checkArray = [];\n\n  const checkEmpty = () => {\n    var empty = false;\n\n    if (timeValue == '') {\n      alert(\"Time Value is empty\");\n      emptyBoxArray.push('timeValueID');\n      empty = true;\n    }\n\n    typeState.map(d => {\n      if (d.select === false) {\n        checkArray.push(d.type);\n      }\n    });\n\n    if (checkArray.length == typeState.length) {\n      alert(\"No checkboxes are selected\");\n      emptyBoxArray.push('dataID');\n      empty = true;\n    }\n\n    if (startingTime == '') {\n      alert(\"Starting Time is empty\");\n      emptyBoxArray.push('startingTimeID');\n      empty = true;\n    }\n\n    if (endingTime == '') {\n      alert(\"Ending Time is empty\");\n      emptyBoxArray.push('endingTimeID');\n      empty = true;\n    }\n\n    return empty;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showModal ? /*#__PURE__*/_jsxDEV(Background, {\n      onClick: closeModal,\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animation,\n        children: /*#__PURE__*/_jsxDEV(ModalWrapper, {\n          showModal: showModal,\n          children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"header\", {\n              children: \"Add an Interval\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              children: \"Time Value:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(InputStyle, {\n              id: \"timeValueID\",\n              type: \"number\",\n              name: \"Time\",\n              onChange: e => {\n                setTime(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              children: \"Collect:            \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Menu, {\n              children: typeState.map((d, i) => /*#__PURE__*/_jsxDEV(TR, {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: /*#__PURE__*/_jsxDEV(Border, {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      id: \"dataID\",\n                      class: \"checkbox\",\n                      onChange: event => {\n                        let checked = event.target.checked;\n                        setTypeState(typeState.map(data => {\n                          if (d.id === data.id) {\n                            data.select = checked;\n                            var checkID = d.id;\n                            console.log(checkID);\n                          }\n\n                          return data;\n                        }));\n                      },\n                      type: \"checkbox\",\n                      checked: d.select\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 243,\n                      columnNumber: 17\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: d.type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 15\n                }, this)]\n              }, d.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              children: \"Starting:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(InputStyle, {\n              id: \"startingTimeID\",\n              type: \"time\",\n              name: \"startingTime\",\n              onChange: e => {\n                setStartingTime(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              children: \"Ending:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(InputStyle, {\n              id: \"endingTimeID\",\n              type: \"time\",\n              name: \"endingTime\",\n              onChange: e => {\n                setEndingTime(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Submit, {\n              onClick: () => {\n                if (checkEmpty() == true) {\n                  changeInputColor(emptyBoxArray);\n                } else {\n                  setShowModal(prev => !prev);\n                  submitInterval();\n                  setTimeout(function () {\n                    window.location.reload();\n                  }, 1);\n                }\n              },\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 1\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CloseModalButton, {\n            \"aria-label\": \"Close modal\",\n            onClick: () => setShowModal(prev => !prev)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n};\n\n_s(AttractionModal, \"+5YZ9TV0PnnyzgnhjQQWqYvKE/s=\", false, function () {\n  return [useSpring];\n});\n\n_c10 = AttractionModal;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"Background\");\n$RefreshReg$(_c2, \"ModalWrapper\");\n$RefreshReg$(_c3, \"ModalContent\");\n$RefreshReg$(_c4, \"CloseModalButton\");\n$RefreshReg$(_c5, \"InputStyle\");\n$RefreshReg$(_c6, \"Submit\");\n$RefreshReg$(_c7, \"TR\");\n$RefreshReg$(_c8, \"Menu\");\n$RefreshReg$(_c9, \"Border\");\n$RefreshReg$(_c10, \"AttractionModal\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Interval/AttractionModal.js"],"names":["React","useState","useRef","useEffect","useCallback","useSpring","animated","styled","MdClose","Axios","Background","div","ModalWrapper","ModalContent","CloseModalButton","InputStyle","input","Submit","button","TR","Menu","Border","AttractionModal","showModal","setShowModal","ride","modalRef","animation","config","duration","opacity","transform","closeModal","e","current","target","keyPress","key","console","log","document","addEventListener","removeEventListener","ride_name","setRideName","startingTime","setStartingTime","endingTime","setEndingTime","timeValue","setTime","typeState","setTypeState","unitState","setUnitState","intervalList","setIntervalList","id","type","map","d","select","submitInterval","post","i","checkData","isChecked","then","alert","emptyBoxArray","changeInputColor","index","length","element","getElementById","style","backgroundColor","checkArray","checkEmpty","empty","push","value","event","checked","data","checkID","prev","setTimeout","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport styled from 'styled-components';\nimport { MdClose } from 'react-icons/md';\nimport Axios from 'axios';\n\n\nconst Background = styled.div`\n  width: 0px;\n  height: 0px;\n  position: fixed;\n  display: flex;\n  align-items: center;\n  z-index: 10;\n`;\n\nconst ModalWrapper = styled.div`\n  top: 200px;\n  width: 485px;\n  height: 100%;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: grey;\n  position: relative;\n  border-radius: 10px;\n`;\n\n\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: left;\n  align-items: left;\n  line-height: 1.8;\n  p {\n    margin-bottom: 1rem;\n  }\n  form {\n    text-align: left;\n    color: lightblue;\n  }\n  header {\n    \n    font-size: 20pt;\n    text-align: left;\n  }\n`;\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 0px;\n  right: 20px;\n  width: 20px;\n  height: 40px;\n  padding: 0;\n  z-index: 10;\n`;\n\nconst InputStyle = styled.input`\nmargin-bottom: 20px;\nwidth: 40%;\n`\nconst Submit = styled.button`\nmargin-top: 20px;\nwidth: 50%;\nposition: relative;\nleft: 20%;\n`\nconst TR = styled.div`\npadding-right: 10px;\nfont-size: 17px;\n`\n\nconst Menu = styled.div`\n  display: flex;\n  width: 100%;\n  overflow-x: auto;\n`;\n\nconst Border = styled.div`\nborder: px solid red;\nbackground: red;\nz-index: 10;\n`\n\nexport const AttractionModal = ({ showModal, setShowModal, ride }) => {\n  const modalRef = useRef();\n\n  const animation = useSpring({\n    config: {\n      duration: 250\n    },\n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(100%)`\n  });\n\n  const closeModal = e => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n    }\n  };\n\n  const keyPress = useCallback(\n    e => {\n      if (e.key === 'Escape' && showModal) {\n        setShowModal(false);\n        console.log('I pressed');\n      }\n    },\n    [setShowModal, showModal]\n  );\n\n  useEffect(() => {\n      document.addEventListener('keydown', keyPress);\n      return () => document.removeEventListener('keydown', keyPress);\n    },\n    [keyPress]\n  );\n\n  //states\n  const [ride_name, setRideName] = useState('');\n  const [startingTime, setStartingTime] = useState('');\n  const [endingTime, setEndingTime] = useState('');\n  const [timeValue, setTime] = useState('');\n  const [typeState, setTypeState] = useState([]);\n  const [unitState, setUnitState] = useState(\"\");\n  const [intervalList, setIntervalList] = useState([]);\n  useEffect(() => {\n    let typeState = [\n      { id: 1, type: \"Wait Time\"},\n      { id: 2, type: \"Throughput\"},\n      { id: 3, type: \"Available Seats\"},\n      { id: 4, type: \"Available Down\"},\n    ];\n    setTypeState(\n      typeState.map(d => {\n        return {\n          select: false,\n          id: d.id,\n          type: d.type,\n        };\n      })\n    );\n  }, []);\n  //state to get all attractions\n  //send the attraction data to the backend running on port 3001\n  //specifically /addAttraction\n  \n  const submitInterval = () =>{\n    Axios.post('http://localhost:3001/addInterval', {\n                  ride_name: ride,\n                  timeValue: timeValue,\n                  typeState: typeState.map((d, i)=>  {\n                  if (d.select === true) {\n\n                    const checkData = {\n                      isChecked: true,\n                      id: d.id,\n                      type: d.type\n                    }\n                    //[d.id, d.type, d.select]                    \n\n                    return checkData;\n                  }\n                  else {\n                    const checkData = {\n                      isChecked: false,\n                      id: d.id,\n                      type: d.type\n                    }\n                    //[d.id, d.type, d.select]                    \n\n                    return checkData;\n                  }\n                  }),\n                  startingTime: startingTime,\n                  endingTime: endingTime}).then(() =>{\n                    alert('successful insert');\n                }).then( () => {\n                  console.log(\"Successfully sent to port 3001\");\n                });\n  };\n  var emptyBoxArray = [];\n  const changeInputColor = (emptyBoxArray) => {\n    for (let index = 0; index < emptyBoxArray.length; index++) {\n      var element = emptyBoxArray[index];\n      console.log(document.getElementById(element));\n      document.getElementById(element).style.backgroundColor = \"pink\";\n  }\n}\nvar checkArray = [];\n  const checkEmpty = () => {\n    var empty = false;\n    if(timeValue == '') {\n      alert(\"Time Value is empty\");\n      emptyBoxArray.push('timeValueID');\n      empty = true;\n    }\n    typeState.map((d)=>  {\n    if (d.select === false) {\n        checkArray.push(d.type)\n    }})\n    if(checkArray.length == typeState.length) {\n      alert(\"No checkboxes are selected\");\n      emptyBoxArray.push('dataID');\n      empty = true;\n    }\n    if(startingTime == '') {\n      alert(\"Starting Time is empty\");\n      emptyBoxArray.push('startingTimeID');\n      empty = true;\n    }\n    if(endingTime == '') {\n      alert(\"Ending Time is empty\");\n      emptyBoxArray.push('endingTimeID');\n      empty = true;\n    }\n    return empty;\n  }\n  return (\n    <>\n      {showModal ? (\n        <Background onClick={closeModal} ref={modalRef}>\n          <animated.div style={animation}>\n            <ModalWrapper showModal={showModal}>\n              <ModalContent>\n\n                <header>Add an Interval</header>\n                {/* <form> Ride Name</form>\n                <InputStyle type='text' name='Name' onChange={(e) => {\n                  setRideName(e.target.value);\n                }}></InputStyle> */}\n                <form>Time Value:</form>\n                <InputStyle id='timeValueID' type='number' name='Time' onChange={(e) => {\n                  setTime(e.target.value);\n                }}></InputStyle>\n                <form >Collect:            </form>\n                  <Menu>\n                {typeState.map((d, i) => ( \n                <TR key={d.id}>\n             <th>\n                <Border>\n                <input \n                  id='dataID'\n                  class=\"checkbox\"\n                  onChange={event => {\n                    let checked = event.target.checked;\n                    setTypeState(\n                      typeState.map(data => {\n                        if (d.id === data.id) {\n                          data.select = checked;\n                          var checkID = d.id;\n                          console.log(checkID);\n                        }\n                        return data;\n                      })\n                    );\n                  }}\n                  type=\"checkbox\"\n                  checked={d.select}\n                ></input>\n                </Border>\n                </th>\n              <td>{d.type}</td>\n\n            </TR>\n                ))}\n                </Menu>\n\n                <form>Starting:</form>\n\n                <InputStyle id='startingTimeID' type='time' name='startingTime' onChange={(e) => {\n                  setStartingTime(e.target.value);\n                }}></InputStyle>\n\n                <form>Ending:</form>\n                <InputStyle id='endingTimeID' type='time' name='endingTime' onChange={(e) => {\n                  setEndingTime(e.target.value);\n                }}></InputStyle>\n\n<Submit \n                onClick={() => {\n\n                                  if(checkEmpty() == true){\n                                    changeInputColor(emptyBoxArray);\n                                  }\n                                  else {\n                                    setShowModal(prev => !prev);\n                                    submitInterval();\n                                    setTimeout(function(){\n                                      window.location.reload(); \n                                    }, 1);\n                                  }\n\n                               }}>Submit</Submit>\n              \n                \n\n\n              </ModalContent>\n              <CloseModalButton\n                aria-label='Close modal'\n                onClick={() => setShowModal(prev => !prev)}\n              />\n\n            </ModalWrapper>\n          </animated.div>\n        </Background>\n      ) : null}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
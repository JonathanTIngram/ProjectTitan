{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      for (let i = 0; i < rideList.length; i++) {\n        var element = rideList[i];\n\n        if (val.ride_name == element) {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        }\n      }\n    });\n  }\n  var data = [];\n  var data1 = [];\n  var selected = '';\n\n  const checkStat = () => {\n    {\n      intervalCard.map(val => {\n        if (val.rideName == rideList[0]) {\n          if (statList == \"Throughput\") {\n            selected = val.Throughput;\n          }\n\n          if (statList == \"Wait Time\") {\n            selected = val.WaitTime;\n          }\n\n          if (statList == \"Available Seats\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (statList == \"Available Down\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (selected != -1) {\n            data.push({\n              x: val.Time,\n              y: selected\n            });\n          }\n        }\n\n        if (val.rideName == rideList[1]) {\n          if (statList == \"Throughput\") {\n            selected = val.Throughput;\n          }\n\n          if (statList == \"Wait Time\") {\n            selected = val.WaitTime;\n          }\n\n          if (statList == \"Available Seats\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (statList == \"Available Down\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (selected != -1) {\n            data1.push({\n              x: val.Time,\n              y: selected\n            });\n          }\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  const graphData = data => {\n    {\n      checkStat();\n    }\n    return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n      data: data,\n      onValueMouseOver: (datapoint, event) => {\n        console.log(datapoint);\n      },\n      curve: 'curveMonotoneX',\n      color: \"#ADDDE1\",\n      markStyle: {\n        stroke: 'black'\n      },\n      style: {\n        strokeLinejoin: \"round\"\n      },\n      strokeStyle: \"solid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), checkStat(), console.log(intervalCard), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n        height: 500,\n        width: 900,\n        xType: \"ordinal\",\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickTotal: data.length,\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            var minutes = new Date(d).getMinutes();\n\n            if (minutes < 10) {\n              minutes = \"0\" + minutes;\n            }\n\n            return new Date(d).getHours() + \":\" + minutes;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: '',\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this), graphData()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","map","val","key","i","length","element","ride_name","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","data1","selected","checkStat","x","y","sort","a","b","graphData","datapoint","event","stroke","strokeLinejoin","window","addEventListener","line","text","fill","fontWeight","d","minutes","getMinutes","getHours"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { Component, useState, useEffect} from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\r\nimport {\r\n  FlexibleXYPlot,\r\n  FlexibleWidthXYPlot,\r\n  FlexibleHeightXYPlot\r\n} from 'react-vis';\r\nimport Axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nfunction ChartLine() {\r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n\r\n\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n\r\n    var intervalCard = [];\r\n    {dataList.map((val, key) => {\t\r\n        for(let i = 0; i < rideList.length; i++)\r\n        {\r\n            var element = rideList[i];\r\n            if (val.ride_name == element)\r\n            {\r\n                var time = new Date(val.ts)\r\n                var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n                intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n                Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n                AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n            }\r\n     }\r\n\r\n     })}\r\n\r\n     var data = []\r\n     var data1 = []\r\n    var selected = '';\r\n    const checkStat = () => {\t\r\n\r\n        {intervalCard.map((val) => {\r\n            if(val.rideName == rideList[0]){\r\n            if(statList == \"Throughput\") {\r\n                selected = val.Throughput\r\n            }\r\n            if(statList == \"Wait Time\") {\r\n                selected = val.WaitTime\r\n            }\r\n            if(statList == \"Available Seats\"){\r\n                selected = val.AvailableSeats\r\n            }\r\n            if(statList == \"Available Down\") {\r\n                selected = val.AvailableSeats\r\n            }\r\n            if(selected != -1) \r\n            {\r\n                data.push({\r\n                    x: val.Time,\r\n                    y: selected\r\n                })\r\n            }\r\n        }\r\n            if(val.rideName == rideList[1]){\r\n                if(statList == \"Throughput\") {\r\n                    selected = val.Throughput\r\n                }\r\n                if(statList == \"Wait Time\") {\r\n                    selected = val.WaitTime\r\n                }\r\n                if(statList == \"Available Seats\"){\r\n                    selected = val.AvailableSeats\r\n                }\r\n                if(statList == \"Available Down\") {\r\n                    selected = val.AvailableSeats\r\n                }\r\n                if(selected != -1) \r\n                {\r\n                    data1.push({\r\n                        x: val.Time,\r\n                        y: selected\r\n                    })\r\n                }\r\n        }\r\n        })}\r\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1);\r\n\r\n    }\r\n\r\n    const graphData = (data) => {\r\n        {checkStat()}\r\n\r\n        return(\r\n        <LineMarkSeries \r\n                 \r\n        data={data} \r\n        onValueMouseOver={(datapoint, event)=>{\r\n            console.log(datapoint)\r\n          }}\r\n          \r\n        curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n        markStyle={{stroke: 'black'}}\r\n        style={{ strokeLinejoin: \"round\"}}\r\n        strokeStyle=\"solid\"/>\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n        }, [])}\r\n                        {checkStat()}\r\n            {console.log(intervalCard)}\r\n            <div className=\"App\">\r\n             <FlexibleXYPlot height={500} width={900} xType=\"ordinal\">\r\n                <VerticalGridLines />\r\n                <HorizontalGridLines />\r\n\r\n                <XAxis title=\"Time of interval card\"\r\n                style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                    \r\n                  }}\r\n                tickTotal={data.length} \r\n                tickLabelAngle={-25} \r\n                tickFormat={d => {\r\n                var minutes = new Date(d).getMinutes();\r\n                if(minutes < 10){\r\n                    minutes = \"0\" + minutes;\r\n                }\r\n                 return new Date(d).getHours()+ \":\" + minutes\r\n                }}\r\n                />\r\n                <YAxis title={''}\r\n                 style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                  }}/>\r\n\r\n                {graphData()}\r\n\r\n            </FlexibleXYPlot>\r\n            </div>\t\t\t\t\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
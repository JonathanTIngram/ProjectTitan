{"ast":null,"code":"// /* eslint-disable */\n// import React, { useState, useEffect} from 'react';\n// import Axios from 'axios';\n// import styled from 'styled-components';\n// function ChartLine() {\n//     var [rideList, setRideList] = useState([]);\n//     var [statList, setStatList] = useState([]);\n//     var [dataList, setDataList] = useState([]);\n//     const CheckedRideName = () => {\n//             Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n//                 //console.log(res.data)\n//                 setRideList(res.data)\n//             }).catch(err => console.log(err));\n//     }\n//     const CheckedStat = () => {\n//         Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n//             //console.log(res.data)\n//             setStatList(res.data)\n//         }).catch(err => console.log(err));\n//     }\n//     const CheckedData = () => {\n//         Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n//             //console.log(res.data)\n//             setDataList(res.data)\n//         }).catch(err => console.log(err));\n//     }\n//     var showRideList = () => {\n//         rideList.map((val, key) => {\n//             return (\n//                     <>\n//                                             <VerticalGridLines />\n//                 <HorizontalGridLines />\n//                 <XAxis title=\"Time of interval card\"\n//                 style={{\n//                     line: {stroke: 'black'},\n//                     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n//                   }}\n//                 tickLabelAngle={-25} \n//                 tickFormat={d => {\n//                 var minutes = new Date(d).getMinutes();\n//                 if(minutes < 10){\n//                     minutes = \"0\" + minutes;\n//                 }\n//                  return new Date(d).getHours()+ \":\" + minutes\n//                 }}\n//                 />\n//                 <YAxis title={selected}\n//                  style={{\n//                     line: {stroke: 'black'},\n//                     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n//                   }}/>\n//             {rideList.map((i) => {\n//                 {checkStat(i)}\n//                 return (\n//                     <LineMarkSeries \n//                     data={data} \n//                     onValueMouseOver={(datapoint, event)=>{\n//                         console.log(datapoint)\n//                       }}\n//                     curve={'curveMonotoneX'} color=\"#ADDDE1\"\n//                     markStyle={{stroke: 'black'}}\n//                     style={{ strokeLinejoin: \"round\"}}\n//                     strokeStyle=\"solid\"/>\n//                 )\n//                 })}\n//                     </>\n//             );\n//         });\n//     }\n//     var intervalCard = [];\n//     var intervalCard1 = [];\n//     for(let i =0; i < rideList.length; i++)\n//     {\n//         var tempName = rideList[i];\n//     {dataList.map((val, key) => {\t\n//      if (val.ride_name == tempName){\n//             var time = new Date(val.ts)\n//             var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n//             intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n//             Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n//             AvailableDown: val.AvailableDown, Time: time, Date: date})\n//         }\n//         if(i > 0)\n//         {\n//             var lastName = rideList[i -1]\n//             if(tempName != lastName)\n//             {\n//             }\n//         }\n//     })}}\n//     var data = []\n//     var selected = '';\n//     const checkStat = (ride) => {\t\n//         console.log(intervalCard)\n//         console.log(intervalCard1)\n//         {intervalCard.map((val) => {\n//             if(val.rideName == ride){\n//             if(statList == \"Throughput\") {\n//                 selected = val.Throughput\n//             }\n//             if(statList == \"Wait Time\") {\n//                 selected = val.WaitTime\n//             }\n//             if(statList == \"Available Seats\"){\n//                 selected = val.AvailableSeats\n//             }\n//             if(statList == \"Available Down\") {\n//                 selected = val.AvailableSeats\n//             }\n//             if(selected != -1) \n//             {\n//                 data.push({\n//                     x: val.Time,\n//                     y: selected\n//                 })\n//             }\n//         }\n//         })}\n//         data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n//     }\n//     return (\n//         <div>\n//             {useEffect(() => {\n//             {window.addEventListener('load', CheckedData())}\n//             {window.addEventListener('load', CheckedRideName())}\n//             {window.addEventListener('load', CheckedStat())}\n//             }, [])}\n//                 <div className=\"App\">\n//                     {rideList.map((val, key) => {\n//                         return (\n//                                     <>\n//                                     </>\n//                                 )\n//                     })};\n//                 </div>\n//         </div>\n//         )\n// }\n// export default ChartLine","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// /* eslint-disable */\r\n// import React, { useState, useEffect} from 'react';\r\n// import Axios from 'axios';\r\n// import styled from 'styled-components';\r\n\r\n\r\n// function ChartLine() {\r\n\r\n\r\n//     var [rideList, setRideList] = useState([]);\r\n//     var [statList, setStatList] = useState([]);\r\n//     var [dataList, setDataList] = useState([]);\r\n\r\n\r\n//     const CheckedRideName = () => {\r\n\r\n//             Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n//                 //console.log(res.data)\r\n//                 setRideList(res.data)\r\n//             }).catch(err => console.log(err));\r\n//     }\r\n\r\n\r\n//     const CheckedStat = () => {\r\n\r\n//         Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n//             //console.log(res.data)\r\n//             setStatList(res.data)\r\n//         }).catch(err => console.log(err));\r\n//     }\r\n\r\n//     const CheckedData = () => {\r\n\r\n//         Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n//             //console.log(res.data)\r\n//             setDataList(res.data)\r\n//         }).catch(err => console.log(err));\r\n//     }\r\n\r\n\r\n//     var showRideList = () => {\r\n\r\n\r\n//         rideList.map((val, key) => {\r\n\r\n//             return (\r\n\r\n//                     <>\r\n//                                             <VerticalGridLines />\r\n//                 <HorizontalGridLines />\r\n\r\n//                 <XAxis title=\"Time of interval card\"\r\n//                 style={{\r\n//                     line: {stroke: 'black'},\r\n//                     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                    \r\n//                   }}\r\n//                 tickLabelAngle={-25} \r\n//                 tickFormat={d => {\r\n//                 var minutes = new Date(d).getMinutes();\r\n//                 if(minutes < 10){\r\n//                     minutes = \"0\" + minutes;\r\n//                 }\r\n//                  return new Date(d).getHours()+ \":\" + minutes\r\n//                 }}\r\n//                 />\r\n//                 <YAxis title={selected}\r\n//                  style={{\r\n//                     line: {stroke: 'black'},\r\n//                     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n//                   }}/>\r\n//             {rideList.map((i) => {\r\n//                 {checkStat(i)}\r\n//                 return (\r\n//                     <LineMarkSeries \r\n                 \r\n//                     data={data} \r\n//                     onValueMouseOver={(datapoint, event)=>{\r\n//                         console.log(datapoint)\r\n//                       }}\r\n                      \r\n//                     curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n//                     markStyle={{stroke: 'black'}}\r\n//                     style={{ strokeLinejoin: \"round\"}}\r\n//                     strokeStyle=\"solid\"/>\r\n//                 )\r\n//                 })}\r\n                    \r\n//                     </>\r\n                \r\n                \r\n//             );\r\n//         });\r\n        \r\n//     }\r\n\r\n\r\n\r\n//     var intervalCard = [];\r\n//     var intervalCard1 = [];\r\n//     for(let i =0; i < rideList.length; i++)\r\n//     {\r\n//         var tempName = rideList[i];\r\n\r\n//     {dataList.map((val, key) => {\t\r\n\r\n\r\n//      if (val.ride_name == tempName){\r\n//             var time = new Date(val.ts)\r\n//             var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n//             intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n//             Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n//             AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n//         }\r\n//         if(i > 0)\r\n//         {\r\n//             var lastName = rideList[i -1]\r\n//             if(tempName != lastName)\r\n//             {\r\n                \r\n//             }\r\n//         }\r\n//     })}}\r\n     \r\n//     var data = []\r\n//     var selected = '';\r\n//     const checkStat = (ride) => {\t\r\n//         console.log(intervalCard)\r\n//         console.log(intervalCard1)\r\n//         {intervalCard.map((val) => {\r\n//             if(val.rideName == ride){\r\n//             if(statList == \"Throughput\") {\r\n//                 selected = val.Throughput\r\n//             }\r\n//             if(statList == \"Wait Time\") {\r\n//                 selected = val.WaitTime\r\n//             }\r\n//             if(statList == \"Available Seats\"){\r\n//                 selected = val.AvailableSeats\r\n//             }\r\n//             if(statList == \"Available Down\") {\r\n//                 selected = val.AvailableSeats\r\n//             }\r\n//             if(selected != -1) \r\n//             {\r\n//                 data.push({\r\n//                     x: val.Time,\r\n//                     y: selected\r\n//                 })\r\n//             }\r\n//         }\r\n//         })}\r\n//         data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\r\n//     }\r\n\r\n//     return (\r\n\r\n//         <div>\r\n//             {useEffect(() => {\r\n//             {window.addEventListener('load', CheckedData())}\r\n//             {window.addEventListener('load', CheckedRideName())}\r\n//             {window.addEventListener('load', CheckedStat())}\r\n//             }, [])}\r\n\r\n//                 <div className=\"App\">\r\n\r\n//                     {rideList.map((val, key) => {\r\n\r\n//                         return (\r\n//                                     <>\r\n//                                     </>\r\n\r\n//                                 )\r\n                                \r\n                            \r\n                            \r\n//                     })};\r\n//                 </div>\r\n        \r\n//         </div>\r\n//         )\r\n// }\r\n\r\n// export default ChartLine"]},"metadata":{},"sourceType":"module"}
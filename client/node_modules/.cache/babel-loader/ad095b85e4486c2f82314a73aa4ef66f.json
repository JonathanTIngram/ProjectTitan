{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arote\\\\OneDrive\\\\Desktop\\\\College\\\\Rowan\\\\Spring 2021\\\\Software Engineering\\\\project-titan\\\\client\\\\src\\\\components\\\\Graph\\\\ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  var id = 0;\n  {\n    dataList.map((val, key) => {\n      if (val.ride_name) {\n        var time = new Date(val.ts);\n        var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n        intervalCard.push({\n          rideName: val.ride_name,\n          WaitTime: val.WaitTime,\n          Throughput: val.Throughput,\n          AvailableSeats: val.AvailableSeats,\n          AvailableDown: val.AvailableDown,\n          Time: time,\n          Date: date\n        });\n      }\n    });\n  }\n\n  function graphData() {\n    {\n      intervalCard.map(val => {\n        if (val.rideName == \"Nitro\") {\n          console.log(\"I am nitro\");\n        }\n      });\n    }\n  } //  const compareRide = () => {\n  //     for(var i = 0; i < index; i++) {\n  //         //check box list is compared with collected data\n  //         if(rideList.includes(rList[i])) {\n  //             console.log(\"Matched \", rList[i]);\n  //             check = true;\n  //             //each variable is compared with the selected stat\n  //             if(statList.includes(\"Wait Time\"))\n  //             {\n  //                 //locate variable\n  //                 if(wList[i] != -1) {\n  //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n  //                  } \n  //             }\n  //             if(statList.includes(\"Throughput\"))\n  //             {\n  //                  //locate variable\n  //                 if(tList[i] != -1) {\n  //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n  //                 }\n  //             }\n  //             if(statList.includes(\"Available Seats\"))\n  //             {\n  //                  //locate variable\n  //                 if(asList[i] != -1) {\n  //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n  //                 }\n  //             }   \n  //             if(statList.includes(\"Available Down\"))\n  //             {\n  //                  //locate variable\n  //                 if(adList[i] != -1) {\n  //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n  //                 }\n  //             }\n  //             console.log('');\n  //         }\n  //     }\n  // }\n\n\n  var data = [];\n  var selected = '';\n\n  const checkStat = () => {\n    {\n      intervalCard.map(val => {\n        for (let index = 0; index < rideList.length; index++) {\n          if (rideList[index] == val.rideName) {\n            if (statList == \"Throughput\") {\n              selected = val.Throughput;\n            }\n\n            if (statList == \"Wait Time\") {\n              selected = val.WaitTime;\n            }\n\n            if (statList == \"Available Seats\") {\n              selected = val.AvailableSeats;\n            }\n\n            if (statList == \"Available Down\") {\n              selected = val.AvailableSeats;\n            }\n\n            if (selected != -1) {\n              data.push({\n                x: val.Time,\n                y: selected\n              });\n            }\n          }\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  var rideName = '';\n  graphData();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), checkStat(), console.log(intervalCard), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n        height: 500,\n        width: 900,\n        xType: \"ordinal\",\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          title: \"Time of interval card\",\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          },\n          tickTotal: data.length,\n          tickLabelAngle: -25,\n          tickFormat: d => {\n            var minutes = new Date(d).getMinutes();\n\n            if (minutes < 10) {\n              minutes = \"0\" + minutes;\n            }\n\n            return new Date(d).getHours() + \":\" + minutes;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          title: '',\n          style: {\n            line: {\n              stroke: 'black'\n            },\n            text: {\n              stroke: 'none',\n              fill: '#6b6b76',\n              fontWeight: 600\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n          data: data,\n          onValueMouseOver: (datapoint, event) => {\n            console.log(datapoint);\n          },\n          curve: 'curveMonotoneX',\n          color: \"#ADDDE1\",\n          markStyle: {\n            stroke: 'black'\n          },\n          style: {\n            strokeLinejoin: \"round\"\n          },\n          strokeStyle: \"solid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["C:/Users/arote/OneDrive/Desktop/College/Rowan/Spring 2021/Software Engineering/project-titan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","id","map","val","key","ride_name","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","graphData","selected","checkStat","index","length","x","y","sort","a","b","window","addEventListener","line","stroke","text","fill","fontWeight","d","minutes","getMinutes","getHours","datapoint","event","strokeLinejoin"],"mappings":"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","sourcesContent":["/* eslint-disable */\r\nimport React, { Component, useState, useEffect} from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\r\nimport {\r\n  FlexibleXYPlot,\r\n  FlexibleWidthXYPlot,\r\n  FlexibleHeightXYPlot\r\n} from 'react-vis';\r\nimport Axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nfunction ChartLine() {\r\n\r\n\r\n    var [rideList, setRideList] = useState([]);\r\n    var [statList, setStatList] = useState([]);\r\n    var [dataList, setDataList] = useState([]);\r\n\r\n\r\n    const CheckedRideName = () => {\r\n\r\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\r\n                //console.log(res.data)\r\n                setRideList(res.data)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    const CheckedStat = () => {\r\n\r\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\r\n            //console.log(res.data)\r\n            setStatList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const CheckedData = () => {\r\n\r\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\r\n            //console.log(res.data)\r\n            setDataList(res.data)\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n\r\n\r\n    var intervalCard = [];\r\n    var id = 0;\r\n    {dataList.map((val, key) => {\t\r\n        if (val.ride_name){\r\n            var time = new Date(val.ts)\r\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\r\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\r\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \r\n            AvailableDown: val.AvailableDown, Time: time, Date: date})\r\n     }\r\n     })}\r\n    function graphData()\r\n    {\r\n        {intervalCard.map((val) => {\r\n            if(val.rideName == \"Nitro\")\r\n            {\r\n                console.log(\"I am nitro\")\r\n            }\r\n        })}\r\n    }\r\n    \r\n    //  const compareRide = () => {\r\n    //     for(var i = 0; i < index; i++) {\r\n    //         //check box list is compared with collected data\r\n    //         if(rideList.includes(rList[i])) {\r\n    //             console.log(\"Matched \", rList[i]);\r\n    //             check = true;\r\n    //             //each variable is compared with the selected stat\r\n    //             if(statList.includes(\"Wait Time\"))\r\n    //             {\r\n    //                 //locate variable\r\n    //                 if(wList[i] != -1) {\r\n    //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\r\n         \r\n\r\n    //                  } \r\n    //             }\r\n    //             if(statList.includes(\"Throughput\"))\r\n    //             {\r\n    //                  //locate variable\r\n    //                 if(tList[i] != -1) {\r\n    //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\r\n   \r\n    //                 }\r\n    //             }\r\n    //             if(statList.includes(\"Available Seats\"))\r\n    //             {\r\n    //                  //locate variable\r\n    //                 if(asList[i] != -1) {\r\n    //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\r\n\r\n    //                 }\r\n    //             }   \r\n    //             if(statList.includes(\"Available Down\"))\r\n    //             {\r\n    //                  //locate variable\r\n    //                 if(adList[i] != -1) {\r\n    //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\r\n      \r\n    //                 }\r\n    //             }\r\n\r\n                \r\n    //             console.log('');\r\n    //         }\r\n    //     }\r\n    // }\r\n     \r\n    var data = []\r\n    var selected = '';\r\n    const checkStat = () => {\t\r\n        {intervalCard.map((val) => {\r\n            for (let index = 0; index < rideList.length; index++) {\r\n            if(rideList[index] == val.rideName){\r\n                if(statList == \"Throughput\") {\r\n                    selected = val.Throughput\r\n                }\r\n                if(statList == \"Wait Time\") {\r\n                    selected = val.WaitTime\r\n                }\r\n                if(statList == \"Available Seats\"){\r\n                    selected = val.AvailableSeats\r\n                }\r\n                if(statList == \"Available Down\") {\r\n                    selected = val.AvailableSeats\r\n                }\r\n                if(selected != -1) \r\n                {\r\n                    data.push({\r\n                        x: val.Time,\r\n                        y: selected\r\n                    })\r\n                 }\r\n        }}\r\n        })}\r\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\r\n    }\r\n    var rideName =''\r\n    graphData()\r\n    return (\r\n\r\n        <div>\r\n\r\n            {useEffect(() => {\r\n            {window.addEventListener('load', CheckedData())}\r\n            {window.addEventListener('load', CheckedRideName())}\r\n            {window.addEventListener('load', CheckedStat())}\r\n        }, [])}\r\n            {checkStat()}\r\n            {console.log(intervalCard)}\r\n            <div className=\"App\">\r\n             <FlexibleXYPlot height={500} width={900} xType=\"ordinal\">\r\n                <VerticalGridLines />\r\n                <HorizontalGridLines />\r\n\r\n                <XAxis title=\"Time of interval card\"\r\n                style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                    \r\n                  }}\r\n                tickTotal={data.length} \r\n                tickLabelAngle={-25} \r\n                tickFormat={d => {\r\n                var minutes = new Date(d).getMinutes();\r\n                if(minutes < 10){\r\n                    minutes = \"0\" + minutes;\r\n                }\r\n                 return new Date(d).getHours()+ \":\" + minutes\r\n                }}\r\n                />\r\n                <YAxis title={''}\r\n                 style={{\r\n                    line: {stroke: 'black'},\r\n                    text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\r\n                  }}/>\r\n            \r\n\r\n\r\n                \r\n                 <LineMarkSeries \r\n                    \r\n                    data={data} \r\n                    onValueMouseOver={(datapoint, event)=>{\r\n                        console.log(datapoint)\r\n                      }}\r\n                      \r\n                    curve={'curveMonotoneX'} color=\"#ADDDE1\"\r\n                    markStyle={{stroke: 'black'}}\r\n                    style={{ strokeLinejoin: \"round\"}}\r\n                    strokeStyle=\"solid\"/>\r\n            </FlexibleXYPlot>\r\n            </div>\t\t\t\t\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
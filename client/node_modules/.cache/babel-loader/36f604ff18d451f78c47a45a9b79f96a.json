{"ast":null,"code":"var _jsxFileName = \"/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport { XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries } from 'react-vis';\nimport { FlexibleXYPlot, FlexibleWidthXYPlot, FlexibleHeightXYPlot } from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var showRideList = () => {\n    if (rideList.length != 0) {\n      rideList.map((val, key) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            title: \"Time of interval card\",\n            style: {\n              line: {\n                stroke: 'black'\n              },\n              text: {\n                stroke: 'none',\n                fill: '#6b6b76',\n                fontWeight: 600\n              }\n            },\n            tickLabelAngle: -25,\n            tickFormat: d => {\n              var minutes = new Date(d).getMinutes();\n\n              if (minutes < 10) {\n                minutes = \"0\" + minutes;\n              }\n\n              return new Date(d).getHours() + \":\" + minutes;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            title: selected,\n            style: {\n              line: {\n                stroke: 'black'\n              },\n              text: {\n                stroke: 'none',\n                fill: '#6b6b76',\n                fontWeight: 600\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), rideList.map(i => {\n            {\n              checkStat(i);\n            }\n            return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n              data: data,\n              onValueMouseOver: (datapoint, event) => {\n                console.log(datapoint);\n              },\n              curve: 'curveMonotoneX',\n              color: \"#ADDDE1\",\n              markStyle: {\n                stroke: 'black'\n              },\n              style: {\n                strokeLinejoin: \"round\"\n              },\n              strokeStyle: \"solid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this);\n          })]\n        }, void 0, true);\n      });\n    }\n  };\n\n  var intervalCard = [];\n  var intervalCard1 = [];\n\n  for (let i = 0; i < rideList.length; i++) {\n    var tempName = rideList[i];\n    {\n      dataList.map((val, key) => {\n        var rideArray = `rideArray${i}`;\n\n        if (val.ride_name == tempName) {\n          var time = new Date(val.ts);\n          var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n          intervalCard.push({\n            rideName: val.ride_name,\n            WaitTime: val.WaitTime,\n            Throughput: val.Throughput,\n            AvailableSeats: val.AvailableSeats,\n            AvailableDown: val.AvailableDown,\n            Time: time,\n            Date: date\n          });\n        }\n\n        if (i > 0) {\n          var lastName = rideList[i - 1];\n\n          if (tempName != lastName) {}\n        }\n      });\n    }\n  } //  const compareRide = () => {\n  //     for(var i = 0; i < index; i++) {\n  //         //check box list is compared with collected data\n  //         if(rideList.includes(rList[i])) {\n  //             console.log(\"Matched \", rList[i]);\n  //             check = true;\n  //             //each variable is compared with the selected stat\n  //             if(statList.includes(\"Wait Time\"))\n  //             {\n  //                 //locate variable\n  //                 if(wList[i] != -1) {\n  //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n  //                  } \n  //             }\n  //             if(statList.includes(\"Throughput\"))\n  //             {\n  //                  //locate variable\n  //                 if(tList[i] != -1) {\n  //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n  //                 }\n  //             }\n  //             if(statList.includes(\"Available Seats\"))\n  //             {\n  //                  //locate variable\n  //                 if(asList[i] != -1) {\n  //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n  //                 }\n  //             }   \n  //             if(statList.includes(\"Available Down\"))\n  //             {\n  //                  //locate variable\n  //                 if(adList[i] != -1) {\n  //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n  //                 }\n  //             }\n  //             console.log('');\n  //         }\n  //     }\n  // }\n\n\n  var data = [];\n  var selected = '';\n\n  const checkStat = ride => {\n    console.log(intervalCard);\n    console.log(intervalCard1);\n    {\n      intervalCard.map(val => {\n        if (val.rideName == 'Superman') {\n          if (statList == \"Throughput\") {\n            selected = val.Throughput;\n          }\n\n          if (statList == \"Wait Time\") {\n            selected = val.WaitTime;\n          }\n\n          if (statList == \"Available Seats\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (statList == \"Available Down\") {\n            selected = val.AvailableSeats;\n          }\n\n          if (selected != -1) {\n            console.log(val.rideName);\n            data.push({\n              x: val.Time,\n              y: selected\n            });\n          }\n        }\n      });\n    }\n    data.sort((a, b) => a.x > b.x ? 1 : a.x === b.x ? 1 : -1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: rideList.map((val, key) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n            height: 500,\n            width: 900,\n            xType: \"time\",\n            children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              title: \"Time of interval card\",\n              style: {\n                line: {\n                  stroke: 'black'\n                },\n                text: {\n                  stroke: 'none',\n                  fill: '#6b6b76',\n                  fontWeight: 600\n                }\n              },\n              tickLabelAngle: -25,\n              tickFormat: d => {\n                var minutes = new Date(d).getMinutes();\n\n                if (minutes < 10) {\n                  minutes = \"0\" + minutes;\n                }\n\n                return new Date(d).getHours() + \":\" + minutes;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              title: selected,\n              style: {\n                line: {\n                  stroke: 'black'\n                },\n                text: {\n                  stroke: 'none',\n                  fill: '#6b6b76',\n                  fontWeight: 600\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 21\n            }, this), rideList.map(i => {\n              {\n                checkStat(i);\n              }\n              return /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n                data: data,\n                onValueMouseOver: (datapoint, event) => {\n                  console.log(datapoint);\n                },\n                curve: 'curveMonotoneX',\n                color: \"#ADDDE1\",\n                markStyle: {\n                  stroke: 'black'\n                },\n                style: {\n                  strokeLinejoin: \"round\"\n                },\n                strokeStyle: \"solid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 25\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 21\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","XYPlot","Borders","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","LineMarkSeries","FlexibleXYPlot","FlexibleWidthXYPlot","FlexibleHeightXYPlot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","showRideList","length","map","val","key","line","stroke","text","fill","fontWeight","d","minutes","Date","getMinutes","getHours","selected","i","checkStat","datapoint","event","strokeLinejoin","intervalCard","intervalCard1","tempName","rideArray","ride_name","time","ts","date","getMonth","getDate","getFullYear","push","rideName","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","lastName","ride","x","y","sort","a","b","window","addEventListener"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, Borders, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LineMarkSeries} from 'react-vis';\nimport {\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from 'react-vis';\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n    var showRideList = () => {\n\n        if (rideList.length != 0){\n            \n\n            rideList.map((val, key) => {\n\n                return (\n    \n                        <>\n                                                <VerticalGridLines />\n                    <HorizontalGridLines />\n    \n                    <XAxis title=\"Time of interval card\"\n                    style={{\n                        line: {stroke: 'black'},\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                        \n                      }}\n                    tickLabelAngle={-25} \n                    tickFormat={d => {\n                    var minutes = new Date(d).getMinutes();\n                    if(minutes < 10){\n                        minutes = \"0\" + minutes;\n                    }\n                     return new Date(d).getHours()+ \":\" + minutes\n                    }}\n                    />\n                    <YAxis title={selected}\n                     style={{\n                        line: {stroke: 'black'},\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                      }}/>\n                {rideList.map((i) => {\n                    {checkStat(i)}\n                    return (\n                        <LineMarkSeries \n                     \n                        data={data} \n                        onValueMouseOver={(datapoint, event)=>{\n                            console.log(datapoint)\n                          }}\n                          \n                        curve={'curveMonotoneX'} color=\"#ADDDE1\"\n                        markStyle={{stroke: 'black'}}\n                        style={{ strokeLinejoin: \"round\"}}\n                        strokeStyle=\"solid\"/>\n                    )\n                    })}\n                        \n                        </>\n                    \n                    \n                );\n            });\n        }\n\n\n        \n    }\n\n\n\n    var intervalCard = [];\n    var intervalCard1 = [];\n    for(let i =0; i < rideList.length; i++)\n    {\n        var tempName = rideList[i];\n\n    {dataList.map((val, key) => {\t\n\n     var rideArray = `rideArray${i}`\n\n     if (val.ride_name == tempName){\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n        }\n        if(i > 0)\n        {\n            var lastName = rideList[i -1]\n            if(tempName != lastName)\n            {\n                \n            }\n        }\n    })}}\n\n    \n    //  const compareRide = () => {\n    //     for(var i = 0; i < index; i++) {\n    //         //check box list is compared with collected data\n    //         if(rideList.includes(rList[i])) {\n    //             console.log(\"Matched \", rList[i]);\n    //             check = true;\n    //             //each variable is compared with the selected stat\n    //             if(statList.includes(\"Wait Time\"))\n    //             {\n    //                 //locate variable\n    //                 if(wList[i] != -1) {\n    //                     console.log(\"Wait Time of \" + rList[i] + \" = \" + wList[i]);\n         \n\n    //                  } \n    //             }\n    //             if(statList.includes(\"Throughput\"))\n    //             {\n    //                  //locate variable\n    //                 if(tList[i] != -1) {\n    //                     console.log(\"Throughput of \" + rList[i] + \" = \" + tList[i]);\n   \n    //                 }\n    //             }\n    //             if(statList.includes(\"Available Seats\"))\n    //             {\n    //                  //locate variable\n    //                 if(asList[i] != -1) {\n    //                     console.log(\"Available seats of \" + rList[i] + \" = \" + asList[i]);\n\n    //                 }\n    //             }   \n    //             if(statList.includes(\"Available Down\"))\n    //             {\n    //                  //locate variable\n    //                 if(adList[i] != -1) {\n    //                     console.log(\"Available down of \" + rList[i] + \" = \" + adList[i]);\n      \n    //                 }\n    //             }\n\n                \n    //             console.log('');\n    //         }\n    //     }\n    // }\n     \n    var data = []\n    var selected = '';\n    const checkStat = (ride) => {\t\n        console.log(intervalCard)\n        console.log(intervalCard1)\n        {intervalCard.map((val) => {\n            if(val.rideName == 'Superman'){\n                if(statList == \"Throughput\") {\n                    selected = val.Throughput\n                }\n                if(statList == \"Wait Time\") {\n                    selected = val.WaitTime\n                }\n                if(statList == \"Available Seats\"){\n                    selected = val.AvailableSeats\n                }\n                if(statList == \"Available Down\") {\n                    selected = val.AvailableSeats\n                }\n                if(selected != -1) \n                {\n                    console.log(val.rideName)\n                    data.push({\n                        x: val.Time,\n                        y: selected\n                    })\n                }\n        }\n        })}\n        data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n    }\n\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n\n\n\n\n            <div className=\"App\">\n\n\n            {rideList.map((val, key) => {\n\n                return (\n                    <>\n                    <FlexibleXYPlot height={500} width={900} xType=\"time\">\n\n\n\n                    <VerticalGridLines />\n                    <HorizontalGridLines />\n\n                    <XAxis title=\"Time of interval card\"\n                    style={{\n                        line: {stroke: 'black'},\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                        \n                    }}\n                    tickLabelAngle={-25} \n                    tickFormat={d => {\n                    var minutes = new Date(d).getMinutes();\n                    if(minutes < 10){\n                        minutes = \"0\" + minutes;\n                    }\n                    return new Date(d).getHours()+ \":\" + minutes\n                    }}\n                    />\n                    <YAxis title={selected}\n                    style={{\n                        line: {stroke: 'black'},\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 600}\n                    }}/>\n                    {rideList.map((i) => {\n                    {checkStat(i)}\n                    return (\n                        \n                    \n                        <LineMarkSeries \n                    \n                        data={data} \n                        onValueMouseOver={(datapoint, event)=>{\n                            console.log(datapoint)\n                        }}\n\n                        \n                        curve={'curveMonotoneX'} color=\"#ADDDE1\"\n                        markStyle={{stroke: 'black'}}\n                        style={{ strokeLinejoin: \"round\"}}\n                        strokeStyle=\"solid\"/>\n                    )\n                    })}\n                    </FlexibleXYPlot>\n                                        </>\n                                    );\n                                })}\n                    \n                                </div>\t\t\t\t\n                            </div>\n                        );\n                        \n                    }\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
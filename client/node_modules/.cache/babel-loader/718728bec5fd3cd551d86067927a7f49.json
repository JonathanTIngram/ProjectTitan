{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      var time = new Date(val.ts);\n      var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n      intervalCard.push({\n        rideName: val.ride_name,\n        WaitTime: val.WaitTime,\n        Throughput: val.Throughput,\n        AvailableSeats: val.AvailableSeats,\n        AvailableDown: val.AvailableDown,\n        Time: time,\n        Date: date\n      });\n    });\n  }\n  var organized = []; //prints intervalCard in order\n\n  const printOrdered = () => {\n    var temp = [];\n    var name = '';\n    intervalCard.forEach(i => {\n      name = i.rideName;\n\n      if (!temp.includes(name)) {\n        temp.push(name);\n      }\n    });\n    {\n      intervalCard.map((val, key) => {\n        var j = 0;\n\n        if (temp[j] == val.rideName) {\n          j++;\n          organized.push(val);\n        } else {\n          organized.unshift(val);\n        }\n      });\n    } //console.log(organized)\n    //console.log(temp)\n  };\n\n  var graphData = [];\n\n  const graphStat = ride => {\n    for (let i = 0; i < ride.length; i++) {\n      var foundData = false;\n      var temp = ride[i];\n      var TEMPthroughputData = [];\n      var TEMPwaitTimeData = [];\n      var TEMPavailableSeatsData = [];\n      var TEMPavailableDownData = [];\n      var TEMPthroughputTime = [];\n      var TEMPwaitTimeTime = [];\n      var TEMPavailableSeatsTime = [];\n      var TEMPavailableDownTime = [];\n\n      for (let i = 0; i < organized.length; i++) {\n        if (organized[i].rideName == temp) {\n          if (statList.includes(\"Throughput\") && organized[i].Throughput >= 0) {\n            TEMPthroughputTime.push(organized[i].Time);\n            TEMPthroughputData.push(organized[i].Throughput);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Wait Time\") && organized[i].WaitTime >= 0) {\n            TEMPwaitTimeData.push(organized[i].WaitTime);\n            TEMPwaitTimeTime.push(organized[i].Time);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Available Seats\") && organized[i].AvailableSeats >= 0) {\n            TEMPavailableSeatsData.push(organized[i].AvailableSeats);\n            TEMPavailableSeatsTime.push(organized[i].Time);\n            foundData = true;\n          }\n\n          if (statList.includes(\"Available Down\") && organized[i].AvailableDown >= 0) {\n            TEMPavailableDownData.push(organized[i].AvailableDown);\n            TEMPavailableDownTime.push(organized[i].Time);\n            foundData = true;\n          }\n\n          if (organized[i].rideName != temp) {\n            break;\n          }\n        }\n      }\n\n      if (foundData) {\n        graphData.push({\n          temp,\n          TEMPthroughputTime,\n          TEMPthroughputData,\n          TEMPwaitTimeTime,\n          TEMPwaitTimeData,\n          TEMPavailableSeatsTime,\n          TEMPavailableSeatsData,\n          TEMPavailableDownTime,\n          TEMPavailableDownData\n        });\n      }\n\n      getGraphData();\n    }\n  };\n\n  var tempRide = '';\n  var rideTraceArray = [];\n  var checked = false;\n\n  const getGraphData = () => {\n    console.log(graphData);\n    var tempRideName2 = '';\n\n    for (let i = 0; i < graphData.length; i++) {\n      if (statList.includes(\"Throughput\") && checked == false) {\n        var stat = \" Throughput\";\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPthroughputTime,\n          y: graphData[i].TEMPthroughputData,\n          name: graphData[i].temp + stat\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n\n      if (statList.includes(\"Wait Time\") && tempRideName2 == rideList[i]) {\n        var stat = \" Wait Time\";\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPwaitTimeTime,\n          y: graphData[i].TEMPwaitTimeData,\n          name: graphData[i].temp + stat\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n\n      if (statList.includes(\"Available Seats\") && tempRideName2 == rideList[i]) {\n        var stat = \" Available Seats\";\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPavailableSeatsTime,\n          y: graphData[i].TEMPavailableSeatsData,\n          name: graphData[i].temp + stat\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n\n      if (statList.includes(\"Available Down\") && tempRideName2 == rideList[i]) {\n        var stat = \" Available Down\";\n        tempRide = graphData[i].temp;\n        tempRide = `${tempRide}Trace`;\n        window[tempRide] = {\n          x: graphData[i].TEMPavailableDownTime,\n          y: graphData[i].TEMPavailableDownData,\n          name: graphData[i].temp + stat\n        };\n        rideTraceArray.push(window[tempRide]);\n      }\n    }\n\n    console.log(\"rideTraceArray\");\n    console.log(rideTraceArray);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), printOrdered(), graphStat(rideList), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDiv\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: rideTraceArray,\n        layout: {\n          width: 750,\n          height: 520,\n          xaxis: {\n            type: 'time'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c2 = ChartLine;\nexport default ChartLine;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"ChartLine\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","useState","useEffect","Plotly","createPlotlyComponent","Axios","styled","Plot","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","map","val","key","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","ride_name","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","organized","printOrdered","temp","name","forEach","i","includes","j","unshift","graphData","graphStat","ride","length","foundData","TEMPthroughputData","TEMPwaitTimeData","TEMPavailableSeatsData","TEMPavailableDownData","TEMPthroughputTime","TEMPwaitTimeTime","TEMPavailableSeatsTime","TEMPavailableDownTime","getGraphData","tempRide","rideTraceArray","checked","tempRideName2","stat","window","x","y","addEventListener","width","height","xaxis","type"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useEffect} from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport Axios from 'axios';\nimport styled from 'styled-components';\nvar Plot = createPlotlyComponent(Plotly);\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n\n    var intervalCard = [];\n\n    {dataList.map((val, key) => {\t\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n        \n     })}\n  \n    var organized = []\n    //prints intervalCard in order\n    const printOrdered = () => {\n        var temp = [];\n        var name = ''\n        intervalCard.forEach(i => {\n            name = i.rideName;\n            if(!temp.includes(name)){\n                temp.push(name)\n            }\n        });\n            {intervalCard.map((val, key) => {\t\n            var j = 0\n            if(temp[j] == val.rideName){\n                j++;\n                organized.push(val)\n            }\n            else{\n                organized.unshift(val)\n            }\n        })}\n        //console.log(organized)\n        //console.log(temp)\n    }\n\n    var graphData = [];\n\n    const graphStat = (ride) => \n    {\n\n        for(let i = 0; i < ride.length; i++)\n        {\n            var foundData = false;\n            var temp = ride[i];\n            var TEMPthroughputData = [];\n            var TEMPwaitTimeData = [];\n            var TEMPavailableSeatsData = [];\n            var TEMPavailableDownData = [];\n            var TEMPthroughputTime = [];\n            var TEMPwaitTimeTime = [];\n            var TEMPavailableSeatsTime = [];\n            var TEMPavailableDownTime = [];\n\n                for(let i = 0; i < organized.length; i++) \n                {   \n                    if(organized[i].rideName == temp)\n                    {\n\n                        if(statList.includes(\"Throughput\") && organized[i].Throughput >= 0){\n                            TEMPthroughputTime.push(organized[i].Time)\n                            TEMPthroughputData.push(organized[i].Throughput);\n                            foundData = true;\n                        }\n\n                        if(statList.includes(\"Wait Time\") && organized[i].WaitTime >= 0){\n                            TEMPwaitTimeData.push(organized[i].WaitTime);\n                            TEMPwaitTimeTime.push(organized[i].Time)\n                            foundData = true;\n                        }\n\n                        if(statList.includes(\"Available Seats\") && organized[i].AvailableSeats >= 0){\n                            TEMPavailableSeatsData.push(organized[i].AvailableSeats);\n                            TEMPavailableSeatsTime.push(organized[i].Time)\n                            foundData = true;\n                        }\n\n                        if(statList.includes(\"Available Down\") && organized[i].AvailableDown >= 0){\n                            TEMPavailableDownData.push(organized[i].AvailableDown);\n                            TEMPavailableDownTime.push(organized[i].Time)\n                            foundData = true;\n                        }\n                        \n                        if(organized[i].rideName != temp)\n                        {\n                            break;\n                        }\n                    }  \n                }\n                if(foundData)\n                {\n                    graphData.push({temp ,TEMPthroughputTime, TEMPthroughputData, TEMPwaitTimeTime, TEMPwaitTimeData, TEMPavailableSeatsTime, TEMPavailableSeatsData, TEMPavailableDownTime, TEMPavailableDownData})\n                }\n                \n              getGraphData();  \n        }\n    }\n    var tempRide = '';\n    var rideTraceArray = [];\n    var checked = false;\n    const getGraphData = () => {\n        console.log(graphData)\n        var tempRideName2 = '';\n\n        for(let i = 0; i < graphData.length; i++)\n        {   \n\n                if(statList.includes(\"Throughput\") && checked == false)\n                {\n                    var stat = \" Throughput\"\n                    tempRide = graphData[i].temp;\n                    tempRide = `${tempRide}Trace`;\n                    window[tempRide] = {\n                        x: graphData[i].TEMPthroughputTime,\n                        y: graphData[i].TEMPthroughputData,\n                        name: graphData[i].temp + stat\n                    };\n                    rideTraceArray.push(window[tempRide])\n                }\n                if(statList.includes(\"Wait Time\") && tempRideName2 == rideList[i])\n                {\n                    var stat = \" Wait Time\"\n                    tempRide = graphData[i].temp;\n                    tempRide = `${tempRide}Trace`;\n                    window[tempRide] = {\n                        x: graphData[i].TEMPwaitTimeTime,\n                        y: graphData[i].TEMPwaitTimeData,\n                        name: graphData[i].temp + stat\n                    };\n                    rideTraceArray.push(window[tempRide])\n                }\n                if(statList.includes(\"Available Seats\") && tempRideName2 == rideList[i])\n                {\n                    var stat = \" Available Seats\"\n                    tempRide = graphData[i].temp;\n                    tempRide = `${tempRide}Trace`;\n                    window[tempRide] = {\n                        x: graphData[i].TEMPavailableSeatsTime,\n                        y: graphData[i].TEMPavailableSeatsData,\n                        name: graphData[i].temp + stat\n                    };\n                    rideTraceArray.push(window[tempRide])\n                }\n                if(statList.includes(\"Available Down\") && tempRideName2 == rideList[i])\n                {\n                    var stat = \" Available Down\"\n                    tempRide = graphData[i].temp;\n                    tempRide = `${tempRide}Trace`;\n                    window[tempRide] = {\n                        x: graphData[i].TEMPavailableDownTime,\n                        y: graphData[i].TEMPavailableDownData,\n                        name: graphData[i].temp + stat\n                    };\n                    rideTraceArray.push(window[tempRide])\n                }\n                \n            \n\n        }\n        console.log(\"rideTraceArray\")\n        console.log(rideTraceArray)\n    }\n\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {printOrdered()}\n            {graphStat(rideList)}\n            <div id='myDiv'>\n            <Plot \n            data={rideTraceArray}\n            layout={{\n                width: 750, height: 520,\n                xaxis: {\n                type: 'time'\n                }, \n            }}\n            />\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
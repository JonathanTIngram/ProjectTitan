{"ast":null,"code":"var _jsxFileName = \"/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { Component, useState, useEffect } from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport Plot from 'react-plotly.js';\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  {\n    dataList.map((val, key) => {\n      var time = new Date(val.ts);\n      var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n      intervalCard.push({\n        rideName: val.ride_name,\n        WaitTime: val.WaitTime,\n        Throughput: val.Throughput,\n        AvailableSeats: val.AvailableSeats,\n        AvailableDown: val.AvailableDown,\n        Time: time,\n        Date: date\n      });\n    });\n  }\n  var data = [];\n  var selected = '';\n  var organized = []; //prints intervalCard in order\n\n  const printOrdered = () => {\n    var temp = [];\n    var name = '';\n    intervalCard.forEach(i => {\n      name = i.rideName;\n\n      if (!temp.includes(name)) {\n        temp.push(name);\n      }\n    });\n    {\n      intervalCard.map((val, key) => {\n        var j = 0;\n\n        if (temp[j] == val.rideName) {\n          j++;\n          organized.push(val);\n        } else {\n          organized.unshift(val);\n        }\n      });\n    } //console.log(organized)\n    //console.log(temp)\n  };\n\n  var time = [];\n  var select = [];\n  var name = [];\n\n  const graphStat = ride => {\n    for (var i = 0; i < organized.length; i++) {\n      if (statList == \"Throughput\") {\n        selected = organized[i].Throughput;\n      }\n\n      if (statList == \"Wait Time\") {\n        selected = organized[i].WaitTime;\n      }\n\n      if (statList == \"Available Seats\") {\n        selected = organized[i].AvailableSeats;\n      }\n\n      if (statList == \"Available Down\") {\n        selected = organized[i].AvailableDown;\n      }\n\n      if (selected != -1) {\n        var x = organized[i].Time;\n        var y = selected;\n        var z = organized[i].rideName;\n        time.push(x);\n        select.push(y);\n        name.push(z);\n      }\n\n      var result = {\n        x: time,\n        y: select,\n        z: name //console.log(select)\n\n      };\n    }\n\n    var tmpX = [];\n    var tmpY = [];\n    var tmpX2 = [];\n    var tmpY2 = [];\n    var tmpX3 = [];\n    var tmpY3 = [];\n\n    const test = ride => {};\n\n    for (var i = 0; i < name.length; i++) {\n      if (result.z[i] == rideList[0]) {\n        tmpX.push(result.x[i]);\n        tmpY.push(result.y[i]);\n      }\n\n      var temp = {\n        x: tmpX,\n        y: tmpY\n      };\n\n      if (result.z[i] == rideList[1]) {\n        tmpX2.push(result.x[i]);\n        tmpY2.push(result.y[i]);\n      }\n\n      var temp2 = {\n        x: tmpX2,\n        y: tmpY2\n      };\n\n      if (result.z[i] == rideList[2]) {\n        tmpX3.push(result.x[i]);\n        tmpY3.push(result.y[i]);\n      }\n\n      var temp3 = {\n        x: tmpX3,\n        y: tmpY3\n      };\n    }\n\n    data.push(temp, temp2, temp3); //data.push(temp, temp2, temp3)\n    //console.log(temp)\n    //data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), printOrdered(), graphStat(rideList), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDiv\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: data,\n        layout: {\n          width: 1000,\n          height: 620,\n          xaxis: {\n            type: 'time'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c = ChartLine;\nexport default ChartLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartLine\");","map":{"version":3,"sources":["/Users/batuhankir/ProjectTitan/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","Component","useState","useEffect","Plot","Axios","styled","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","map","val","key","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","ride_name","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","selected","organized","printOrdered","temp","name","forEach","i","includes","j","unshift","select","graphStat","ride","length","x","y","z","result","tmpX","tmpY","tmpX2","tmpY2","tmpX3","tmpY3","test","temp2","temp3","window","addEventListener","width","height","xaxis","type"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { Component, useState, useEffect} from 'react';\nimport '../../../node_modules/react-vis/dist/style.css';\nimport Plot from 'react-plotly.js';\nimport Axios from 'axios';\nimport styled from 'styled-components';\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n\n    var intervalCard = [];\n    {dataList.map((val, key) => {\t\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n        \n     })}\n  \n    var data = []\n    var selected = '';\n    var organized = []\n    //prints intervalCard in order\n    const printOrdered = () => {\n        var temp = [];\n        var name = ''\n        intervalCard.forEach(i => {\n            name = i.rideName;\n            if(!temp.includes(name)){\n                temp.push(name)\n            }\n        });\n            {intervalCard.map((val, key) => {\t\n            var j = 0\n            if(temp[j] == val.rideName){\n                j++;\n                organized.push(val)\n            }\n            else{\n                organized.unshift(val)\n            }\n        })}\n        //console.log(organized)\n        //console.log(temp)\n    }\n\n    var time = []\n    var select = []\n    var name = []\n    const graphStat = (ride) => {\n        for ( var i = 0 ; i < organized.length ; i++ ) {\n            if(statList == \"Throughput\") {\n                selected = organized[i].Throughput\n            }\n            if(statList == \"Wait Time\") {\n                selected = organized[i].WaitTime\n            }\n            if(statList == \"Available Seats\"){\n                selected = organized[i].AvailableSeats\n            }\n            if(statList == \"Available Down\") {\n                selected = organized[i].AvailableDown\n            }\n            if(selected != -1){\n                    var x = organized[i].Time\n                    var y = selected\n                    var z = organized[i].rideName\n                    time.push(x)\n                    select.push(y)\n                    name.push(z)\n            }\n            var result = {\n                x: time,\n                y: select,\n                z: name\n            //console.log(select)\n        }\n     }\n\n     var tmpX = [];\n     var tmpY = [];\n     var tmpX2 = [];\n     var tmpY2 = [];\n     var tmpX3 = [];\n     var tmpY3 = [];\n     const test = (ride) => {\n\n     }\n     for (var i = 0 ; i < name.length ; i++ ) {\n         if(result.z[i] == rideList[0]){\n             tmpX.push(result.x[i])\n             tmpY.push(result.y[i])\n         }\n         var temp = {\n             x: tmpX,\n             y: tmpY,\n         };\n         if(result.z[i] == rideList[1]){\n             tmpX2.push(result.x[i])\n             tmpY2.push(result.y[i])\n         }\n         var temp2 = {\n             x: tmpX2,\n             y: tmpY2,\n         };\n         if(result.z[i] == rideList[2]){\n             tmpX3.push(result.x[i])\n             tmpY3.push(result.y[i])\n         }\n         var temp3 = {\n             x: tmpX3,\n             y: tmpY3,\n         };\n     }\n     data.push(temp, temp2, temp3)\n     \n        //data.push(temp, temp2, temp3)\n        //console.log(temp)\n        //data.sort((a, b) => (a.x > b.x) ? 1 : (a.x === b.x) ? 1 : -1)\n    \n    }\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {printOrdered()}\n            {graphStat(rideList)}\n            <div id='myDiv'>\n            <Plot \n            data={data}\n            layout={{\n                width: 1000, height: 620,\n                xaxis: {\n                type: 'time'\n                }, \n            }}\n            />\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}
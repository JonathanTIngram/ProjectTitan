{"ast":null,"code":"var _jsxFileName = \"/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport Axios from 'axios';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nfunction ChartLine() {\n  _s();\n\n  var [rideList, setRideList] = useState([]);\n  var [statList, setStatList] = useState([]);\n  var [dataList, setDataList] = useState([]);\n  var state = [];\n  var state2 = [];\n  var state3 = [];\n\n  const CheckedRideName = () => {\n    Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n      //console.log(res.data)\n      setRideList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedStat = () => {\n    Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n      //console.log(res.data)\n      setStatList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  const CheckedData = () => {\n    Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n      //console.log(res.data)\n      setDataList(res.data);\n    }).catch(err => console.log(err));\n  };\n\n  var intervalCard = [];\n  var throughput;\n  {\n    dataList.map((val, key) => {\n      var time = new Date(val.ts);\n      var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n      intervalCard.push({\n        rideName: val.ride_name,\n        WaitTime: val.WaitTime,\n        Throughput: val.Throughput,\n        AvailableSeats: val.AvailableSeats,\n        AvailableDown: val.AvailableDown,\n        Time: time,\n        Date: date\n      });\n    });\n  }\n  var data = [];\n  var selected = '';\n  var organized = []; //prints intervalCard in order\n\n  const printOrdered = () => {\n    var temp = [];\n    var name = '';\n    intervalCard.forEach(i => {\n      name = i.rideName;\n\n      if (!temp.includes(name)) {\n        temp.push(name);\n      }\n    });\n    {\n      intervalCard.map((val, key) => {\n        var j = 0;\n\n        if (temp[j] == val.rideName) {\n          j++;\n          organized.push(val);\n        } else {\n          organized.unshift(val);\n        }\n      });\n    } //console.log(organized)\n    //console.log(temp)\n  };\n\n  var time = [];\n  var select = [];\n  var throughputData = [];\n  var waitTimeData = [];\n  var availableSeatsData = [];\n  var availableDownData = [];\n  var name = [];\n\n  const graphStat = ride => {\n    organized.map((val, key) => {\n      console.log(val.Throughput);\n      state.push(val.Throughput);\n      state2.push(val.WaitTime);\n      state3.push(val.AvailableSeats);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [useEffect(() => {\n      {\n        window.addEventListener('load', CheckedData());\n      }\n      {\n        window.addEventListener('load', CheckedRideName());\n      }\n      {\n        window.addEventListener('load', CheckedStat());\n      }\n    }, []), printOrdered(), graphStat(rideList), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myDiv\",\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: [1, 3, 4],\n          y: state,\n          name: \"Throughput\"\n        }, {\n          x: [2, 4, 8],\n          y: state2,\n          name: \"Wait Time\"\n        }, {\n          x: [3, 6, 9],\n          y: state3,\n          name: \"Available Seats\"\n        }],\n        layout: {\n          width: 750,\n          height: 520,\n          xaxis: {\n            type: 'time'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartLine, \"vGbCVrqDan+5cQVEl78sxmhvyCo=\");\n\n_c2 = ChartLine;\nexport default ChartLine;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"ChartLine\");","map":{"version":3,"sources":["/Users/jonathaningram/Desktop/testing1/Sprint6/ProjectTitan/client/src/components/Graph/ChartLine.js"],"names":["React","useState","useEffect","Plotly","createPlotlyComponent","Axios","styled","Plot","ChartLine","rideList","setRideList","statList","setStatList","dataList","setDataList","state","state2","state3","CheckedRideName","get","then","res","data","catch","err","console","log","CheckedStat","CheckedData","intervalCard","throughput","map","val","key","time","Date","ts","date","getMonth","getDate","getFullYear","push","rideName","ride_name","WaitTime","Throughput","AvailableSeats","AvailableDown","Time","selected","organized","printOrdered","temp","name","forEach","i","includes","j","unshift","select","throughputData","waitTimeData","availableSeatsData","availableDownData","graphStat","ride","window","addEventListener","x","y","width","height","xaxis","type"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useEffect} from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport Axios from 'axios';\nimport styled from 'styled-components';\nvar Plot = createPlotlyComponent(Plotly);\n\nfunction ChartLine() {\n\n\n    var [rideList, setRideList] = useState([]);\n    var [statList, setStatList] = useState([]);\n    var [dataList, setDataList] = useState([]);\n\n    var state = [];\n    var state2 = [];\n    var state3 = [];\n\n\n    const CheckedRideName = () => {\n\n            Axios.get(`http://localhost:3001/sendRideNameGraph`).then(res => {\n                //console.log(res.data)\n                setRideList(res.data)\n            }).catch(err => console.log(err));\n    }\n\n\n    const CheckedStat = () => {\n\n        Axios.get(`http://localhost:3001/sendStatsGraph`).then(res => {\n            //console.log(res.data)\n            setStatList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n    const CheckedData = () => {\n\n        Axios.get(`http://localhost:3001/getCollectedData`).then(res => {\n            //console.log(res.data)\n            setDataList(res.data)\n        }).catch(err => console.log(err));\n    }\n\n\n\n    var intervalCard = [];\n    var throughput;\n\n    {dataList.map((val, key) => {\t\n            var time = new Date(val.ts)\n            var date = new Date(val.ts).getMonth() + \"/\" + new Date(val.ts).getDate() + \"/\" + new Date(val.ts).getFullYear();\n            intervalCard.push({rideName: val.ride_name, WaitTime: val.WaitTime,\n            Throughput: val.Throughput, AvailableSeats: val.AvailableSeats, \n            AvailableDown: val.AvailableDown, Time: time, Date: date})\n        \n     })}\n  \n    var data = []\n    var selected = '';\n    var organized = []\n    //prints intervalCard in order\n    const printOrdered = () => {\n        var temp = [];\n        var name = ''\n        intervalCard.forEach(i => {\n            name = i.rideName;\n            if(!temp.includes(name)){\n                temp.push(name)\n            }\n        });\n            {intervalCard.map((val, key) => {\t\n            var j = 0\n            if(temp[j] == val.rideName){\n                j++;\n                organized.push(val)\n            }\n            else{\n                organized.unshift(val)\n            }\n        })}\n        //console.log(organized)\n        //console.log(temp)\n    }\n\n    var time = [];\n    var select = [];\n    var throughputData = [];\n    var waitTimeData = [];\n    var availableSeatsData = [];\n    var availableDownData = [];\n    var name = []\n    const graphStat = (ride) => {\n        organized.map((val, key) => {\n            console.log(val.Throughput)\n            state.push(val.Throughput);\n            state2.push(val.WaitTime);\n            state3.push(val.AvailableSeats);\n         })\n    \n    }\n    return (\n\n        <div>\n            {useEffect(() => {\n            {window.addEventListener('load', CheckedData())}\n            {window.addEventListener('load', CheckedRideName())}\n            {window.addEventListener('load', CheckedStat())}\n        }, [])}\n            {printOrdered()}\n            {graphStat(rideList)}\n            <div id='myDiv'>\n            <Plot \n            data={[\n                {\n                    x: [1,3,4],\n                    y: state,\n                    name: \"Throughput\"\n                },\n                {\n                    x: [2,4,8],\n                    y: state2,\n                    name: \"Wait Time\"\n                },\n                {\n                    x: [3, 6, 9],\n                    y: state3,\n                    name: \"Available Seats\"\n                }\n            ]}\n            layout={{\n                width: 750, height: 520,\n                xaxis: {\n                type: 'time'\n                }, \n            }}\n            />\n            </div>\t\t\t\t\n        </div>\n    );\n    \n}\n\nexport default ChartLine"]},"metadata":{},"sourceType":"module"}